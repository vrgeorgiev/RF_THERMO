
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bc2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000044  00800060  00000bc2  00000c36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00000c84  00000000  00000000  00000c7c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      000001b6  00000000  00000000  00001900  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000160  00000000  00000000  00001ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000139a  00000000  00000000  00001c18  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000071e  00000000  00000000  00002fb2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000c88  00000000  00000000  000036d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000360  00000000  00000000  00004358  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000043f  00000000  00000000  000046b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f32  00000000  00000000  00004af7  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  00005a29  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 ec       	ldi	r30, 0xC2	; 194
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 3a       	cpi	r26, 0xA4	; 164
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a4 ea       	ldi	r26, 0xA4	; 164
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a4 3a       	cpi	r26, 0xA4	; 164
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	2e d1       	rcall	.+604    	; 0x2b6 <main>
  5a:	b1 c5       	rjmp	.+2914   	; 0xbbe <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <lcd_hi>:
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_5ms);
}

void lcd_hi(unsigned char data) {
	PORTC = (PORTC & 0xf0) |((data >>4) & 0x0f);
  5e:	95 b3       	in	r25, 0x15	; 21
  60:	82 95       	swap	r24
  62:	8f 70       	andi	r24, 0x0F	; 15
  64:	90 7f       	andi	r25, 0xF0	; 240
  66:	98 2b       	or	r25, r24
  68:	95 bb       	out	0x15, r25	; 21
}
  6a:	08 95       	ret

0000006c <lcd_low>:

void lcd_low(unsigned char data) {
	PORTC = (PORTC & 0xf0) | (data&0x0F);
  6c:	95 b3       	in	r25, 0x15	; 21
  6e:	8f 70       	andi	r24, 0x0F	; 15
  70:	90 7f       	andi	r25, 0xF0	; 240
  72:	98 2b       	or	r25, r24
  74:	95 bb       	out	0x15, r25	; 21
}
  76:	08 95       	ret

00000078 <lcd_pulse_e>:
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_100us);
}

void lcd_pulse_e() {
	E_HI;
  78:	ac 9a       	sbi	0x15, 4	; 21
	TCNT0 = val;
}

static inline void timer1_start(unsigned char val)
{
	TCCR1B = val;
  7a:	83 e0       	ldi	r24, 0x03	; 3
  7c:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
  7e:	1d bc       	out	0x2d, r1	; 45
  80:	1c bc       	out	0x2c, r1	; 44
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_100us); 
  82:	8c b5       	in	r24, 0x2c	; 44
  84:	9d b5       	in	r25, 0x2d	; 45
  86:	8b 30       	cpi	r24, 0x0B	; 11
  88:	91 05       	cpc	r25, r1
  8a:	d8 f3       	brcs	.-10     	; 0x82 <lcd_pulse_e+0xa>
	E_LOW;	
  8c:	ac 98       	cbi	0x15, 4	; 21
	TCNT0 = val;
}

static inline void timer1_start(unsigned char val)
{
	TCCR1B = val;
  8e:	83 e0       	ldi	r24, 0x03	; 3
  90:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
  92:	1d bc       	out	0x2d, r1	; 45
  94:	1c bc       	out	0x2c, r1	; 44
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_100us);
  96:	8c b5       	in	r24, 0x2c	; 44
  98:	9d b5       	in	r25, 0x2d	; 45
  9a:	8b 30       	cpi	r24, 0x0B	; 11
  9c:	91 05       	cpc	r25, r1
  9e:	d8 f3       	brcs	.-10     	; 0x96 <lcd_pulse_e+0x1e>
}
  a0:	08 95       	ret

000000a2 <lcd_cmd>:
	lcd_low(data);
	lcd_pulse_e();
}

void lcd_cmd(unsigned char cmd) 
{
  a2:	cf 93       	push	r28
  a4:	c8 2f       	mov	r28, r24
	RS_LOW;
  a6:	ad 98       	cbi	0x15, 5	; 21
	lcd_hi(cmd);
  a8:	da df       	rcall	.-76     	; 0x5e <lcd_hi>
	lcd_pulse_e();
  aa:	e6 df       	rcall	.-52     	; 0x78 <lcd_pulse_e>
	TCNT0 = val;
}

static inline void timer1_start(unsigned char val)
{
	TCCR1B = val;
  ac:	83 e0       	ldi	r24, 0x03	; 3
  ae:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
  b0:	1d bc       	out	0x2d, r1	; 45
  b2:	1c bc       	out	0x2c, r1	; 44
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_100us);
  b4:	2c b5       	in	r18, 0x2c	; 44
  b6:	3d b5       	in	r19, 0x2d	; 45
  b8:	2b 30       	cpi	r18, 0x0B	; 11
  ba:	31 05       	cpc	r19, r1
  bc:	d8 f3       	brcs	.-10     	; 0xb4 <lcd_cmd+0x12>
	lcd_low(cmd);
  be:	8c 2f       	mov	r24, r28
  c0:	d5 df       	rcall	.-86     	; 0x6c <lcd_low>
	lcd_pulse_e();
  c2:	da df       	rcall	.-76     	; 0x78 <lcd_pulse_e>
	TCNT0 = val;
}

static inline void timer1_start(unsigned char val)
{
	TCCR1B = val;
  c4:	83 e0       	ldi	r24, 0x03	; 3
  c6:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
  c8:	1d bc       	out	0x2d, r1	; 45
  ca:	1c bc       	out	0x2c, r1	; 44
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_100us);
  cc:	8c b5       	in	r24, 0x2c	; 44
  ce:	9d b5       	in	r25, 0x2d	; 45
  d0:	8b 30       	cpi	r24, 0x0B	; 11
  d2:	91 05       	cpc	r25, r1
  d4:	d8 f3       	brcs	.-10     	; 0xcc <lcd_cmd+0x2a>
}
  d6:	cf 91       	pop	r28
  d8:	08 95       	ret

000000da <lcd_xy>:
//#include "iso.h"
#define MCU_XTAL 7372800UL

void lcd_xy(unsigned char x, unsigned char y) {
	
	if (y==0)
  da:	66 23       	and	r22, r22
  dc:	19 f4       	brne	.+6      	; 0xe4 <lcd_xy+0xa>
		lcd_cmd(0x80 + x);
  de:	80 58       	subi	r24, 0x80	; 128
  e0:	e0 df       	rcall	.-64     	; 0xa2 <lcd_cmd>
  e2:	0e c0       	rjmp	.+28     	; 0x100 <lcd_xy+0x26>
	else if (y==1)
  e4:	61 30       	cpi	r22, 0x01	; 1
  e6:	19 f4       	brne	.+6      	; 0xee <lcd_xy+0x14>
		lcd_cmd(0xC0 + x);
  e8:	80 54       	subi	r24, 0x40	; 64
  ea:	db df       	rcall	.-74     	; 0xa2 <lcd_cmd>
  ec:	09 c0       	rjmp	.+18     	; 0x100 <lcd_xy+0x26>
	else if (y==2)
  ee:	62 30       	cpi	r22, 0x02	; 2
  f0:	19 f4       	brne	.+6      	; 0xf8 <lcd_xy+0x1e>
		lcd_cmd(0x94 + x);
  f2:	8c 56       	subi	r24, 0x6C	; 108
  f4:	d6 df       	rcall	.-84     	; 0xa2 <lcd_cmd>
  f6:	04 c0       	rjmp	.+8      	; 0x100 <lcd_xy+0x26>
	else if (y==3)
  f8:	63 30       	cpi	r22, 0x03	; 3
  fa:	11 f4       	brne	.+4      	; 0x100 <lcd_xy+0x26>
		lcd_cmd(0xD4 + x);
  fc:	8c 52       	subi	r24, 0x2C	; 44
  fe:	d1 df       	rcall	.-94     	; 0xa2 <lcd_cmd>
	TCNT0 = val;
}

static inline void timer1_start(unsigned char val)
{
	TCCR1B = val;
 100:	83 e0       	ldi	r24, 0x03	; 3
 102:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
 104:	1d bc       	out	0x2d, r1	; 45
 106:	1c bc       	out	0x2c, r1	; 44

	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_5ms);
 108:	8c b5       	in	r24, 0x2c	; 44
 10a:	9d b5       	in	r25, 0x2d	; 45
 10c:	22 e0       	ldi	r18, 0x02	; 2
 10e:	80 34       	cpi	r24, 0x40	; 64
 110:	92 07       	cpc	r25, r18
 112:	d0 f3       	brcs	.-12     	; 0x108 <lcd_xy+0x2e>
}
 114:	08 95       	ret

00000116 <lcd_char>:
		data++;
	}
}

void lcd_char(unsigned char data) 
{
 116:	cf 93       	push	r28
 118:	c8 2f       	mov	r28, r24
	TCNT0 = val;
}

static inline void timer1_start(unsigned char val)
{
	TCCR1B = val;
 11a:	83 e0       	ldi	r24, 0x03	; 3
 11c:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
 11e:	1d bc       	out	0x2d, r1	; 45
 120:	1c bc       	out	0x2c, r1	; 44
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_100us);
 122:	8c b5       	in	r24, 0x2c	; 44
 124:	9d b5       	in	r25, 0x2d	; 45
 126:	8b 30       	cpi	r24, 0x0B	; 11
 128:	91 05       	cpc	r25, r1
 12a:	d8 f3       	brcs	.-10     	; 0x122 <lcd_char+0xc>
	RS_HI;
 12c:	ad 9a       	sbi	0x15, 5	; 21
	lcd_hi(data);
 12e:	8c 2f       	mov	r24, r28
 130:	96 df       	rcall	.-212    	; 0x5e <lcd_hi>
	lcd_pulse_e();
 132:	a2 df       	rcall	.-188    	; 0x78 <lcd_pulse_e>
	TCNT0 = val;
}

static inline void timer1_start(unsigned char val)
{
	TCCR1B = val;
 134:	83 e0       	ldi	r24, 0x03	; 3
 136:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
 138:	1d bc       	out	0x2d, r1	; 45
 13a:	1c bc       	out	0x2c, r1	; 44
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_100us); 
 13c:	8c b5       	in	r24, 0x2c	; 44
 13e:	9d b5       	in	r25, 0x2d	; 45
 140:	8b 30       	cpi	r24, 0x0B	; 11
 142:	91 05       	cpc	r25, r1
 144:	d8 f3       	brcs	.-10     	; 0x13c <lcd_char+0x26>
	lcd_low(data);
 146:	8c 2f       	mov	r24, r28
 148:	91 df       	rcall	.-222    	; 0x6c <lcd_low>
	lcd_pulse_e();
 14a:	96 df       	rcall	.-212    	; 0x78 <lcd_pulse_e>
}
 14c:	cf 91       	pop	r28
 14e:	08 95       	ret

00000150 <lcd_string>:
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_100us);
}

void lcd_string(char *data) 
{
 150:	cf 93       	push	r28
 152:	df 93       	push	r29
 154:	ec 01       	movw	r28, r24
	while (*data != 0) 
 156:	88 81       	ld	r24, Y
 158:	88 23       	and	r24, r24
 15a:	29 f0       	breq	.+10     	; 0x166 <lcd_string+0x16>
	lcd_cmd(0x01);
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_100us);
}

void lcd_string(char *data) 
 15c:	21 96       	adiw	r28, 0x01	; 1
{
	while (*data != 0) 
	{
		lcd_char(*data);
 15e:	db df       	rcall	.-74     	; 0x116 <lcd_char>
	while (TCNT1 < TIME_100us);
}

void lcd_string(char *data) 
{
	while (*data != 0) 
 160:	89 91       	ld	r24, Y+
 162:	88 23       	and	r24, r24
 164:	e1 f7       	brne	.-8      	; 0x15e <lcd_string+0xe>
	{
		lcd_char(*data);
		data++;
	}
}
 166:	df 91       	pop	r29
 168:	cf 91       	pop	r28
 16a:	08 95       	ret

0000016c <lcd_init>:
	PORTC = (PORTC & 0xf0) | (data&0x0F);
}

void lcd_init() 
{
	DDRC = 0xff;
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	84 bb       	out	0x14, r24	; 20
	PORTC = 0x00;
 170:	15 ba       	out	0x15, r1	; 21
	TCNT0 = val;
}

static inline void timer1_start(unsigned char val)
{
	TCCR1B = val;
 172:	83 e0       	ldi	r24, 0x03	; 3
 174:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
 176:	1d bc       	out	0x2d, r1	; 45
 178:	1c bc       	out	0x2c, r1	; 44
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_200ms);
 17a:	8c b5       	in	r24, 0x2c	; 44
 17c:	9d b5       	in	r25, 0x2d	; 45
 17e:	2a e5       	ldi	r18, 0x5A	; 90
 180:	80 30       	cpi	r24, 0x00	; 0
 182:	92 07       	cpc	r25, r18
 184:	d0 f3       	brcs	.-12     	; 0x17a <lcd_init+0xe>

	RS_LOW;
 186:	ad 98       	cbi	0x15, 5	; 21
	lcd_hi(0x20);
 188:	80 e2       	ldi	r24, 0x20	; 32
 18a:	69 df       	rcall	.-302    	; 0x5e <lcd_hi>
	lcd_pulse_e();
 18c:	75 df       	rcall	.-278    	; 0x78 <lcd_pulse_e>
	TCNT0 = val;
}

static inline void timer1_start(unsigned char val)
{
	TCCR1B = val;
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
 192:	1d bc       	out	0x2d, r1	; 45
 194:	1c bc       	out	0x2c, r1	; 44
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_100us);
 196:	8c b5       	in	r24, 0x2c	; 44
 198:	9d b5       	in	r25, 0x2d	; 45
 19a:	8b 30       	cpi	r24, 0x0B	; 11
 19c:	91 05       	cpc	r25, r1
 19e:	d8 f3       	brcs	.-10     	; 0x196 <lcd_init+0x2a>
	
	lcd_cmd(0x28);
 1a0:	88 e2       	ldi	r24, 0x28	; 40
 1a2:	7f df       	rcall	.-258    	; 0xa2 <lcd_cmd>
	TCNT0 = val;
}

static inline void timer1_start(unsigned char val)
{
	TCCR1B = val;
 1a4:	83 e0       	ldi	r24, 0x03	; 3
 1a6:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
 1a8:	1d bc       	out	0x2d, r1	; 45
 1aa:	1c bc       	out	0x2c, r1	; 44
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_5ms);
 1ac:	8c b5       	in	r24, 0x2c	; 44
 1ae:	9d b5       	in	r25, 0x2d	; 45
 1b0:	22 e0       	ldi	r18, 0x02	; 2
 1b2:	80 34       	cpi	r24, 0x40	; 64
 1b4:	92 07       	cpc	r25, r18
 1b6:	d0 f3       	brcs	.-12     	; 0x1ac <lcd_init+0x40>

	lcd_cmd(0x06);
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	73 df       	rcall	.-282    	; 0xa2 <lcd_cmd>
	TCNT0 = val;
}

static inline void timer1_start(unsigned char val)
{
	TCCR1B = val;
 1bc:	83 e0       	ldi	r24, 0x03	; 3
 1be:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
 1c0:	1d bc       	out	0x2d, r1	; 45
 1c2:	1c bc       	out	0x2c, r1	; 44
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_100us);
 1c4:	8c b5       	in	r24, 0x2c	; 44
 1c6:	9d b5       	in	r25, 0x2d	; 45
 1c8:	8b 30       	cpi	r24, 0x0B	; 11
 1ca:	91 05       	cpc	r25, r1
 1cc:	d8 f3       	brcs	.-10     	; 0x1c4 <lcd_init+0x58>

	lcd_cmd(0x0C);
 1ce:	8c e0       	ldi	r24, 0x0C	; 12
 1d0:	68 df       	rcall	.-304    	; 0xa2 <lcd_cmd>
	TCNT0 = val;
}

static inline void timer1_start(unsigned char val)
{
	TCCR1B = val;
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
 1d6:	1d bc       	out	0x2d, r1	; 45
 1d8:	1c bc       	out	0x2c, r1	; 44
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_100us);
 1da:	8c b5       	in	r24, 0x2c	; 44
 1dc:	9d b5       	in	r25, 0x2d	; 45
 1de:	8b 30       	cpi	r24, 0x0B	; 11
 1e0:	91 05       	cpc	r25, r1
 1e2:	d8 f3       	brcs	.-10     	; 0x1da <lcd_init+0x6e>
	
	lcd_cmd(0x01);
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	5d df       	rcall	.-326    	; 0xa2 <lcd_cmd>
	TCNT0 = val;
}

static inline void timer1_start(unsigned char val)
{
	TCCR1B = val;
 1e8:	83 e0       	ldi	r24, 0x03	; 3
 1ea:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 0;
 1ec:	1d bc       	out	0x2d, r1	; 45
 1ee:	1c bc       	out	0x2c, r1	; 44
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_100us);
 1f0:	8c b5       	in	r24, 0x2c	; 44
 1f2:	9d b5       	in	r25, 0x2d	; 45
 1f4:	8b 30       	cpi	r24, 0x0B	; 11
 1f6:	91 05       	cpc	r25, r1
 1f8:	d8 f3       	brcs	.-10     	; 0x1f0 <lcd_init+0x84>
}
 1fa:	08 95       	ret

000001fc <lcd_clear>:
	timer1_start(T1_PRESCALER);
	while (TCNT1 < TIME_100us);
}

void lcd_clear(void)
{
 1fc:	cf 93       	push	r28
 1fe:	df 93       	push	r29
	lcd_xy(0,0);
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	60 e0       	ldi	r22, 0x00	; 0
 204:	6a df       	rcall	.-300    	; 0xda <lcd_xy>
 206:	c8 e6       	ldi	r28, 0x68	; 104
 208:	d0 e0       	ldi	r29, 0x00	; 0
	for(int i = 0x00; i<0x68;i++)
	lcd_char(' ');
 20a:	80 e2       	ldi	r24, 0x20	; 32
 20c:	84 df       	rcall	.-248    	; 0x116 <lcd_char>
 20e:	21 97       	sbiw	r28, 0x01	; 1
}

void lcd_clear(void)
{
	lcd_xy(0,0);
	for(int i = 0x00; i<0x68;i++)
 210:	e1 f7       	brne	.-8      	; 0x20a <lcd_clear+0xe>
	lcd_char(' ');
}
 212:	df 91       	pop	r29
 214:	cf 91       	pop	r28
 216:	08 95       	ret

00000218 <lcd_clear_row>:

void lcd_clear_row(unsigned char row)
{
 218:	cf 93       	push	r28
 21a:	c8 2f       	mov	r28, r24
	if (row==0)
 21c:	88 23       	and	r24, r24
 21e:	21 f4       	brne	.+8      	; 0x228 <lcd_clear_row+0x10>
		lcd_xy(0,0);
 220:	80 e0       	ldi	r24, 0x00	; 0
 222:	60 e0       	ldi	r22, 0x00	; 0
 224:	5a df       	rcall	.-332    	; 0xda <lcd_xy>
 226:	0c c0       	rjmp	.+24     	; 0x240 <lcd_clear_row+0x28>
	if (row==1)
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	21 f4       	brne	.+8      	; 0x234 <lcd_clear_row+0x1c>
		lcd_xy(0,1);
 22c:	80 e0       	ldi	r24, 0x00	; 0
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	54 df       	rcall	.-344    	; 0xda <lcd_xy>
 232:	0b c0       	rjmp	.+22     	; 0x24a <lcd_clear_row+0x32>
	if (row==2)
 234:	82 30       	cpi	r24, 0x02	; 2
 236:	21 f4       	brne	.+8      	; 0x240 <lcd_clear_row+0x28>
		lcd_xy(0,2);
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	62 e0       	ldi	r22, 0x02	; 2
 23c:	4e df       	rcall	.-356    	; 0xda <lcd_xy>
 23e:	05 c0       	rjmp	.+10     	; 0x24a <lcd_clear_row+0x32>
	if (row==3)
 240:	c3 30       	cpi	r28, 0x03	; 3
 242:	19 f4       	brne	.+6      	; 0x24a <lcd_clear_row+0x32>
		lcd_xy(0,3);
 244:	80 e0       	ldi	r24, 0x00	; 0
 246:	63 e0       	ldi	r22, 0x03	; 3
 248:	48 df       	rcall	.-368    	; 0xda <lcd_xy>
	lcd_string("                    \0");
 24a:	80 e6       	ldi	r24, 0x60	; 96
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	80 df       	rcall	.-256    	; 0x150 <lcd_string>
 250:	cf 91       	pop	r28
 252:	08 95       	ret

00000254 <serial_putc>:
	serial_putc( ((val&0x0f) < 10) ? (val&0x0f) + 48 : (val&0x0f) + 55 );  // lower nibble
}

void serial_putc(unsigned char data)
{
	while((UCSRA&(1<<UDRE)) == 0);
 254:	5d 9b       	sbis	0x0b, 5	; 11
 256:	fe cf       	rjmp	.-4      	; 0x254 <serial_putc>
	UDR = data; 								
 258:	8c b9       	out	0x0c, r24	; 12
}; 
 25a:	08 95       	ret

0000025c <serial_put_byte2ascii>:
	serial_putc('\r');
	serial_putc('\n');
}

void serial_put_byte2ascii(unsigned char val)
{
 25c:	cf 93       	push	r28
 25e:	c8 2f       	mov	r28, r24
	unsigned char ascii1=val;
	serial_putc( ((ascii1>>4) < 10) ? (ascii1>>4) + 48 : (ascii1>>4) + 55 );  // upper nibble
 260:	82 95       	swap	r24
 262:	8f 70       	andi	r24, 0x0F	; 15
 264:	8a 30       	cpi	r24, 0x0A	; 10
 266:	10 f4       	brcc	.+4      	; 0x26c <serial_put_byte2ascii+0x10>
 268:	80 5d       	subi	r24, 0xD0	; 208
 26a:	01 c0       	rjmp	.+2      	; 0x26e <serial_put_byte2ascii+0x12>
 26c:	89 5c       	subi	r24, 0xC9	; 201
 26e:	f2 df       	rcall	.-28     	; 0x254 <serial_putc>
	serial_putc( ((val&0x0f) < 10) ? (val&0x0f) + 48 : (val&0x0f) + 55 );  // lower nibble
 270:	8c 2f       	mov	r24, r28
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	8f 70       	andi	r24, 0x0F	; 15
 276:	90 70       	andi	r25, 0x00	; 0
 278:	8a 30       	cpi	r24, 0x0A	; 10
 27a:	91 05       	cpc	r25, r1
 27c:	24 f4       	brge	.+8      	; 0x286 <serial_put_byte2ascii+0x2a>
 27e:	cf 70       	andi	r28, 0x0F	; 15
 280:	8c 2f       	mov	r24, r28
 282:	80 5d       	subi	r24, 0xD0	; 208
 284:	03 c0       	rjmp	.+6      	; 0x28c <serial_put_byte2ascii+0x30>
 286:	cf 70       	andi	r28, 0x0F	; 15
 288:	8c 2f       	mov	r24, r28
 28a:	89 5c       	subi	r24, 0xC9	; 201
 28c:	e3 df       	rcall	.-58     	; 0x254 <serial_putc>
}
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <usart_send_msg>:
	
	return 0;
}

void usart_send_msg(unsigned char *msg_buf, unsigned int nbytes)
{
 292:	cf 93       	push	r28
 294:	df 93       	push	r29
 296:	ec 01       	movw	r28, r24
	//unsigned char i;
	while (*msg_buf != 0)
 298:	88 81       	ld	r24, Y
 29a:	88 23       	and	r24, r24
 29c:	29 f0       	breq	.+10     	; 0x2a8 <usart_send_msg+0x16>
	}
	
	return 0;
}

void usart_send_msg(unsigned char *msg_buf, unsigned int nbytes)
 29e:	21 96       	adiw	r28, 0x01	; 1
{
	//unsigned char i;
	while (*msg_buf != 0)
	//for(i=0 ; i < nbytes; i++)
		serial_putc(*msg_buf++);  
 2a0:	d9 df       	rcall	.-78     	; 0x254 <serial_putc>
}

void usart_send_msg(unsigned char *msg_buf, unsigned int nbytes)
{
	//unsigned char i;
	while (*msg_buf != 0)
 2a2:	89 91       	ld	r24, Y+
 2a4:	88 23       	and	r24, r24
 2a6:	e1 f7       	brne	.-8      	; 0x2a0 <usart_send_msg+0xe>
	//for(i=0 ; i < nbytes; i++)
		serial_putc(*msg_buf++);  
	serial_putc('\r');
 2a8:	8d e0       	ldi	r24, 0x0D	; 13
 2aa:	d4 df       	rcall	.-88     	; 0x254 <serial_putc>
	serial_putc('\n');
 2ac:	8a e0       	ldi	r24, 0x0A	; 10
 2ae:	d2 df       	rcall	.-92     	; 0x254 <serial_putc>
}
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <main>:
#include "lcd.h"



int main(void)
{
 2b6:	cf 93       	push	r28
 2b8:	df 93       	push	r29
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
 2be:	a8 97       	sbiw	r28, 0x28	; 40
 2c0:	0f b6       	in	r0, 0x3f	; 63
 2c2:	f8 94       	cli
 2c4:	de bf       	out	0x3e, r29	; 62
 2c6:	0f be       	out	0x3f, r0	; 63
 2c8:	cd bf       	out	0x3d, r28	; 61
	unsigned char msg_buf[MSG_BUF_SIZE];
	unsigned int cnt;
	
	rf_rx_init();
 2ca:	a0 d0       	rcall	.+320    	; 0x40c <rf_rx_init>
	lcd_init();
 2cc:	4f df       	rcall	.-354    	; 0x16c <lcd_init>

	
	char temp_0, temp_1, buffer[30];
	unsigned char 	rx_cnt = 0;
	lcd_xy(0,0);
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	60 e0       	ldi	r22, 0x00	; 0
 2d2:	03 df       	rcall	.-506    	; 0xda <lcd_xy>
	rf_rx_init();
	lcd_init();

	
	char temp_0, temp_1, buffer[30];
	unsigned char 	rx_cnt = 0;
 2d4:	dd 24       	eor	r13, r13
		if (!(cnt & 0x8000))
		{
			
			rx_cnt++;
			lcd_xy(0,0);
			sprintf(buffer,"cnt: %03d",rx_cnt);
 2d6:	8e 01       	movw	r16, r28
 2d8:	05 5f       	subi	r16, 0xF5	; 245
 2da:	1f 4f       	sbci	r17, 0xFF	; 255
 2dc:	0f 2e       	mov	r0, r31
 2de:	f6 e7       	ldi	r31, 0x76	; 118
 2e0:	8f 2e       	mov	r8, r31
 2e2:	f0 e0       	ldi	r31, 0x00	; 0
 2e4:	9f 2e       	mov	r9, r31
 2e6:	f0 2d       	mov	r31, r0
			temp_0 = msg_buf[0];
			temp_1 = msg_buf[1];
			
						
			lcd_xy(0,1);
			sprintf(buffer,"T0:%0d%cC T1:%0d%cC", temp_0,0xDF ,temp_1, 0xDF);
 2e8:	0f 2e       	mov	r0, r31
 2ea:	f0 e8       	ldi	r31, 0x80	; 128
 2ec:	6f 2e       	mov	r6, r31
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	7f 2e       	mov	r7, r31
 2f2:	f0 2d       	mov	r31, r0
 2f4:	0f 2e       	mov	r0, r31
 2f6:	ff ed       	ldi	r31, 0xDF	; 223
 2f8:	af 2e       	mov	r10, r31
 2fa:	bb 24       	eor	r11, r11
 2fc:	f0 2d       	mov	r31, r0
			lcd_string(buffer);
			
			sprintf(buffer,"T0:%03d T1:%03d",temp_0, temp_1);	
 2fe:	0f 2e       	mov	r0, r31
 300:	f4 e9       	ldi	r31, 0x94	; 148
 302:	4f 2e       	mov	r4, r31
 304:	f0 e0       	ldi	r31, 0x00	; 0
 306:	5f 2e       	mov	r5, r31
 308:	f0 2d       	mov	r31, r0


	
	while(1)
	{
		cnt = rf_recv_msg(msg_buf);
 30a:	ce 01       	movw	r24, r28
 30c:	01 96       	adiw	r24, 0x01	; 1
 30e:	13 d1       	rcall	.+550    	; 0x536 <rf_recv_msg>
		if (!(cnt & 0x8000))
 310:	99 23       	and	r25, r25
 312:	dc f3       	brlt	.-10     	; 0x30a <main+0x54>
		{
			
			rx_cnt++;
 314:	d3 94       	inc	r13
			lcd_xy(0,0);
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	60 e0       	ldi	r22, 0x00	; 0
 31a:	df de       	rcall	.-578    	; 0xda <lcd_xy>
			sprintf(buffer,"cnt: %03d",rx_cnt);
 31c:	00 d0       	rcall	.+0      	; 0x31e <main+0x68>
 31e:	00 d0       	rcall	.+0      	; 0x320 <main+0x6a>
 320:	00 d0       	rcall	.+0      	; 0x322 <main+0x6c>
 322:	ed b7       	in	r30, 0x3d	; 61
 324:	fe b7       	in	r31, 0x3e	; 62
 326:	31 96       	adiw	r30, 0x01	; 1
 328:	ad b7       	in	r26, 0x3d	; 61
 32a:	be b7       	in	r27, 0x3e	; 62
 32c:	12 96       	adiw	r26, 0x02	; 2
 32e:	1c 93       	st	X, r17
 330:	0e 93       	st	-X, r16
 332:	11 97       	sbiw	r26, 0x01	; 1
 334:	93 82       	std	Z+3, r9	; 0x03
 336:	82 82       	std	Z+2, r8	; 0x02
 338:	d4 82       	std	Z+4, r13	; 0x04
 33a:	15 82       	std	Z+5, r1	; 0x05
 33c:	7b d1       	rcall	.+758    	; 0x634 <sprintf>
			lcd_string(buffer);
 33e:	8d b7       	in	r24, 0x3d	; 61
 340:	9e b7       	in	r25, 0x3e	; 62
 342:	06 96       	adiw	r24, 0x06	; 6
 344:	0f b6       	in	r0, 0x3f	; 63
 346:	f8 94       	cli
 348:	9e bf       	out	0x3e, r25	; 62
 34a:	0f be       	out	0x3f, r0	; 63
 34c:	8d bf       	out	0x3d, r24	; 61
 34e:	c8 01       	movw	r24, r16
 350:	ff de       	rcall	.-514    	; 0x150 <lcd_string>
			
			temp_0 = msg_buf[0];
 352:	f9 80       	ldd	r15, Y+1	; 0x01
			temp_1 = msg_buf[1];
 354:	ea 80       	ldd	r14, Y+2	; 0x02
			
						
			lcd_xy(0,1);
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	61 e0       	ldi	r22, 0x01	; 1
 35a:	bf de       	rcall	.-642    	; 0xda <lcd_xy>
			sprintf(buffer,"T0:%0d%cC T1:%0d%cC", temp_0,0xDF ,temp_1, 0xDF);
 35c:	ad b7       	in	r26, 0x3d	; 61
 35e:	be b7       	in	r27, 0x3e	; 62
 360:	1c 97       	sbiw	r26, 0x0c	; 12
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	be bf       	out	0x3e, r27	; 62
 368:	0f be       	out	0x3f, r0	; 63
 36a:	ad bf       	out	0x3d, r26	; 61
 36c:	ed b7       	in	r30, 0x3d	; 61
 36e:	fe b7       	in	r31, 0x3e	; 62
 370:	31 96       	adiw	r30, 0x01	; 1
 372:	12 96       	adiw	r26, 0x02	; 2
 374:	1c 93       	st	X, r17
 376:	0e 93       	st	-X, r16
 378:	11 97       	sbiw	r26, 0x01	; 1
 37a:	73 82       	std	Z+3, r7	; 0x03
 37c:	62 82       	std	Z+2, r6	; 0x02
 37e:	f4 82       	std	Z+4, r15	; 0x04
 380:	15 82       	std	Z+5, r1	; 0x05
 382:	b7 82       	std	Z+7, r11	; 0x07
 384:	a6 82       	std	Z+6, r10	; 0x06
 386:	e0 86       	std	Z+8, r14	; 0x08
 388:	11 86       	std	Z+9, r1	; 0x09
 38a:	b3 86       	std	Z+11, r11	; 0x0b
 38c:	a2 86       	std	Z+10, r10	; 0x0a
 38e:	52 d1       	rcall	.+676    	; 0x634 <sprintf>
			lcd_string(buffer);
 390:	8d b7       	in	r24, 0x3d	; 61
 392:	9e b7       	in	r25, 0x3e	; 62
 394:	0c 96       	adiw	r24, 0x0c	; 12
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	f8 94       	cli
 39a:	9e bf       	out	0x3e, r25	; 62
 39c:	0f be       	out	0x3f, r0	; 63
 39e:	8d bf       	out	0x3d, r24	; 61
 3a0:	c8 01       	movw	r24, r16
 3a2:	d6 de       	rcall	.-596    	; 0x150 <lcd_string>
			
			sprintf(buffer,"T0:%03d T1:%03d",temp_0, temp_1);	
 3a4:	ad b7       	in	r26, 0x3d	; 61
 3a6:	be b7       	in	r27, 0x3e	; 62
 3a8:	18 97       	sbiw	r26, 0x08	; 8
 3aa:	0f b6       	in	r0, 0x3f	; 63
 3ac:	f8 94       	cli
 3ae:	be bf       	out	0x3e, r27	; 62
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	ad bf       	out	0x3d, r26	; 61
 3b4:	ed b7       	in	r30, 0x3d	; 61
 3b6:	fe b7       	in	r31, 0x3e	; 62
 3b8:	31 96       	adiw	r30, 0x01	; 1
 3ba:	12 96       	adiw	r26, 0x02	; 2
 3bc:	1c 93       	st	X, r17
 3be:	0e 93       	st	-X, r16
 3c0:	11 97       	sbiw	r26, 0x01	; 1
 3c2:	53 82       	std	Z+3, r5	; 0x03
 3c4:	42 82       	std	Z+2, r4	; 0x02
 3c6:	f4 82       	std	Z+4, r15	; 0x04
 3c8:	15 82       	std	Z+5, r1	; 0x05
 3ca:	e6 82       	std	Z+6, r14	; 0x06
 3cc:	17 82       	std	Z+7, r1	; 0x07
 3ce:	32 d1       	rcall	.+612    	; 0x634 <sprintf>
			usart_send_msg(buffer, 15);
 3d0:	8d b7       	in	r24, 0x3d	; 61
 3d2:	9e b7       	in	r25, 0x3e	; 62
 3d4:	08 96       	adiw	r24, 0x08	; 8
 3d6:	0f b6       	in	r0, 0x3f	; 63
 3d8:	f8 94       	cli
 3da:	9e bf       	out	0x3e, r25	; 62
 3dc:	0f be       	out	0x3f, r0	; 63
 3de:	8d bf       	out	0x3d, r24	; 61
 3e0:	c8 01       	movw	r24, r16
 3e2:	6f e0       	ldi	r22, 0x0F	; 15
 3e4:	70 e0       	ldi	r23, 0x00	; 0
 3e6:	55 df       	rcall	.-342    	; 0x292 <usart_send_msg>
 3e8:	90 cf       	rjmp	.-224    	; 0x30a <main+0x54>

000003ea <rf_tx_enable>:
	rf_tx_disable();
}

void rf_tx_enable(void)
{
    UBRRH = UART_BAUDRATE>>8;     
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	80 bd       	out	0x20, r24	; 32
    UBRRL = UART_BAUDRATE;
 3ee:	8f e7       	ldi	r24, 0x7F	; 127
 3f0:	89 b9       	out	0x09, r24	; 9
    UCSRB =(1<<TXEN); 
 3f2:	88 e0       	ldi	r24, 0x08	; 8
 3f4:	8a b9       	out	0x0a, r24	; 10
    UCSRC =((1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0));   
 3f6:	86 e8       	ldi	r24, 0x86	; 134
 3f8:	80 bd       	out	0x20, r24	; 32
}
 3fa:	08 95       	ret

000003fc <rf_tx_disable>:
void rf_tx_disable(void)
{
	//UCSRB =0;
	//UCSRC =0x80;
	
	UCSRB &=~(1<<TXEN);
 3fc:	53 98       	cbi	0x0a, 3	; 10
		
    DDRD |= (1 << DDD1);   
 3fe:	89 9a       	sbi	0x11, 1	; 17
    PORTD &= ~(1 << PORTD1);     
 400:	91 98       	cbi	0x12, 1	; 18
}
 402:	08 95       	ret

00000404 <rf_recv_byte>:

unsigned char rf_recv_byte (void)
{
	while((UCSRA&(1<<RXC)) == 0);
 404:	5f 9b       	sbis	0x0b, 7	; 11
 406:	fe cf       	rjmp	.-4      	; 0x404 <rf_recv_byte>
	return UDR;
 408:	8c b1       	in	r24, 0x0c	; 12

}
 40a:	08 95       	ret

0000040c <rf_rx_init>:

void rf_rx_init(void)
{
	UBRRH = UART_BAUDRATE>>8;    
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	80 bd       	out	0x20, r24	; 32
    UBRRL = UART_BAUDRATE;   
 410:	8f e7       	ldi	r24, 0x7F	; 127
 412:	89 b9       	out	0x09, r24	; 9
    UCSRB =((1<<RXEN) | (1<<TXEN)) ;
 414:	88 e1       	ldi	r24, 0x18	; 24
 416:	8a b9       	out	0x0a, r24	; 10
    UCSRC =((1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0));    
 418:	86 e8       	ldi	r24, 0x86	; 134
 41a:	80 bd       	out	0x20, r24	; 32
}
 41c:	08 95       	ret

0000041e <man_encode>:
	result = nibbles_to_byte(high_nibble, low_nibble);
	return result;
}

unsigned char man_encode (unsigned char in_nibble)
{
 41e:	cf 93       	push	r28
 420:	df 93       	push	r29
 422:	0f 92       	push	r0
 424:	cd b7       	in	r28, 0x3d	; 61
 426:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char out_byte = 0;
 428:	19 82       	std	Y+1, r1	; 0x01
 42a:	94 e0       	ldi	r25, 0x04	; 4
	for(unsigned char i=0; i<4; i++)
	{
		out_byte = out_byte << 2;
 42c:	29 81       	ldd	r18, Y+1	; 0x01
 42e:	22 0f       	add	r18, r18
 430:	22 0f       	add	r18, r18
 432:	29 83       	std	Y+1, r18	; 0x01
		out_byte = out_byte +  (in_nibble & 0x01) + 0x01;
 434:	29 81       	ldd	r18, Y+1	; 0x01
 436:	2f 5f       	subi	r18, 0xFF	; 255
 438:	38 2f       	mov	r19, r24
 43a:	31 70       	andi	r19, 0x01	; 1
 43c:	23 0f       	add	r18, r19
 43e:	29 83       	std	Y+1, r18	; 0x01
		in_nibble = in_nibble >> 1;
 440:	86 95       	lsr	r24
 442:	91 50       	subi	r25, 0x01	; 1
}

unsigned char man_encode (unsigned char in_nibble)
{
	volatile unsigned char out_byte = 0;
	for(unsigned char i=0; i<4; i++)
 444:	99 f7       	brne	.-26     	; 0x42c <man_encode+0xe>
	{
		out_byte = out_byte << 2;
		out_byte = out_byte +  (in_nibble & 0x01) + 0x01;
		in_nibble = in_nibble >> 1;
	}
	return out_byte;
 446:	89 81       	ldd	r24, Y+1	; 0x01
}
 448:	0f 90       	pop	r0
 44a:	df 91       	pop	r29
 44c:	cf 91       	pop	r28
 44e:	08 95       	ret

00000450 <rf_send_byte>:
#include <avr/io.h>
#include "rf_dll.h"
#define MCU_XTAL 7372800UL

void rf_send_byte(unsigned char byte)
{
 450:	cf 93       	push	r28
 452:	c8 2f       	mov	r28, r24
	unsigned char man_tx;
	unsigned char nibble=byte&0xf0;
	nibble = nibble>>4;
	man_tx = man_encode (nibble);
 454:	82 95       	swap	r24
 456:	8f 70       	andi	r24, 0x0F	; 15
 458:	e2 df       	rcall	.-60     	; 0x41e <man_encode>
	while((UCSRA&(1<<UDRE)) == 0);
 45a:	5d 9b       	sbis	0x0b, 5	; 11
 45c:	fe cf       	rjmp	.-4      	; 0x45a <rf_send_byte+0xa>
	UDR = man_tx;
 45e:	8c b9       	out	0x0c, r24	; 12
	
	nibble=byte&0x0f;
	man_tx = man_encode (nibble);
 460:	8c 2f       	mov	r24, r28
 462:	8f 70       	andi	r24, 0x0F	; 15
 464:	dc df       	rcall	.-72     	; 0x41e <man_encode>
	while((UCSRA&(1<<UDRE)) == 0);
 466:	5d 9b       	sbis	0x0b, 5	; 11
 468:	fe cf       	rjmp	.-4      	; 0x466 <__stack+0x7>
	UDR = man_tx;
 46a:	8c b9       	out	0x0c, r24	; 12
}
 46c:	cf 91       	pop	r28
 46e:	08 95       	ret

00000470 <man_decode>:
unsigned char man_decode (unsigned char encoded)
{
	unsigned char i,dec,enc,pattern;
	enc = encoded;
	dec = 0;
	if ((enc&0b11000000)==0b10000000)	
 470:	28 2f       	mov	r18, r24
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	a9 01       	movw	r20, r18
 476:	40 7c       	andi	r20, 0xC0	; 192
 478:	50 70       	andi	r21, 0x00	; 0

unsigned char man_decode (unsigned char encoded)
{
	unsigned char i,dec,enc,pattern;
	enc = encoded;
	dec = 0;
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	40 38       	cpi	r20, 0x80	; 128
 47e:	51 05       	cpc	r21, r1
 480:	09 f0       	breq	.+2      	; 0x484 <man_decode+0x14>
 482:	80 e0       	ldi	r24, 0x00	; 0
	if ((enc&0b11000000)==0b10000000)	
		dec = dec | 0b00000001;
	if ((enc&0b00110000)==0b00100000)
 484:	a9 01       	movw	r20, r18
 486:	40 73       	andi	r20, 0x30	; 48
 488:	50 70       	andi	r21, 0x00	; 0
 48a:	40 32       	cpi	r20, 0x20	; 32
 48c:	51 05       	cpc	r21, r1
 48e:	09 f4       	brne	.+2      	; 0x492 <man_decode+0x22>
		dec = dec | 0b00000010;
 490:	82 60       	ori	r24, 0x02	; 2
	if ((enc&0b00001100)==0b00001000)
 492:	a9 01       	movw	r20, r18
 494:	4c 70       	andi	r20, 0x0C	; 12
 496:	50 70       	andi	r21, 0x00	; 0
 498:	48 30       	cpi	r20, 0x08	; 8
 49a:	51 05       	cpc	r21, r1
 49c:	09 f4       	brne	.+2      	; 0x4a0 <man_decode+0x30>
		dec = dec | 0b00000100;
 49e:	84 60       	ori	r24, 0x04	; 4
	if ((enc&0b00000011)==0b00000010)
 4a0:	23 70       	andi	r18, 0x03	; 3
 4a2:	30 70       	andi	r19, 0x00	; 0
 4a4:	22 30       	cpi	r18, 0x02	; 2
 4a6:	31 05       	cpc	r19, r1
 4a8:	09 f4       	brne	.+2      	; 0x4ac <man_decode+0x3c>
		dec = dec | 0b00001000;		
 4aa:	88 60       	ori	r24, 0x08	; 8
	return dec;
}
 4ac:	08 95       	ret

000004ae <nibbles_to_byte>:

unsigned char nibbles_to_byte(unsigned char high_nibble, unsigned char low_nibble)
{
	unsigned char result=0;
	result = high_nibble;
	result = result << 4;
 4ae:	82 95       	swap	r24
 4b0:	80 7f       	andi	r24, 0xF0	; 240
	result += low_nibble;
	return result;
}
 4b2:	86 0f       	add	r24, r22
 4b4:	08 95       	ret

000004b6 <get_byte>:
		
	return msg_len;
}

unsigned char get_byte(void)
{
 4b6:	cf 93       	push	r28
	unsigned char rcvd_byte, high_nibble, low_nibble, result;
	rcvd_byte = rf_recv_byte();
 4b8:	a5 df       	rcall	.-182    	; 0x404 <rf_recv_byte>
	high_nibble = man_decode (rcvd_byte);
 4ba:	da df       	rcall	.-76     	; 0x470 <man_decode>
 4bc:	c8 2f       	mov	r28, r24
	rcvd_byte = rf_recv_byte();
 4be:	a2 df       	rcall	.-188    	; 0x404 <rf_recv_byte>
	low_nibble = man_decode (rcvd_byte);
 4c0:	d7 df       	rcall	.-82     	; 0x470 <man_decode>
 4c2:	68 2f       	mov	r22, r24
	result = nibbles_to_byte(high_nibble, low_nibble);
 4c4:	8c 2f       	mov	r24, r28
 4c6:	f3 df       	rcall	.-26     	; 0x4ae <nibbles_to_byte>
	return result;
}
 4c8:	cf 91       	pop	r28
 4ca:	08 95       	ret

000004cc <check_valid_data>:
}

unsigned char check_valid_data(unsigned char byte)
{
	
	if ((byte & 0xC0) == 0xC0)
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	9c 01       	movw	r18, r24
 4d0:	20 7c       	andi	r18, 0xC0	; 192
 4d2:	30 70       	andi	r19, 0x00	; 0
 4d4:	20 3c       	cpi	r18, 0xC0	; 192
 4d6:	31 05       	cpc	r19, r1
 4d8:	f1 f0       	breq	.+60     	; 0x516 <check_valid_data+0x4a>
		return 2;
	if ((byte & 0x30) == 0x30)
 4da:	ac 01       	movw	r20, r24
 4dc:	40 73       	andi	r20, 0x30	; 48
 4de:	50 70       	andi	r21, 0x00	; 0
 4e0:	40 33       	cpi	r20, 0x30	; 48
 4e2:	51 05       	cpc	r21, r1
 4e4:	d1 f0       	breq	.+52     	; 0x51a <check_valid_data+0x4e>
		return 3;
	if ((byte & 0x0C) == 0x0C)
 4e6:	bc 01       	movw	r22, r24
 4e8:	6c 70       	andi	r22, 0x0C	; 12
 4ea:	70 70       	andi	r23, 0x00	; 0
 4ec:	6c 30       	cpi	r22, 0x0C	; 12
 4ee:	71 05       	cpc	r23, r1
 4f0:	b1 f0       	breq	.+44     	; 0x51e <check_valid_data+0x52>
		return 4;
	if ((byte & 0x03) == 0x03)
 4f2:	83 70       	andi	r24, 0x03	; 3
 4f4:	90 70       	andi	r25, 0x00	; 0
 4f6:	83 30       	cpi	r24, 0x03	; 3
 4f8:	91 05       	cpc	r25, r1
 4fa:	99 f0       	breq	.+38     	; 0x522 <check_valid_data+0x56>
		return 5;
	if ((byte & 0xC0) == 0x00)
 4fc:	21 15       	cp	r18, r1
 4fe:	31 05       	cpc	r19, r1
 500:	91 f0       	breq	.+36     	; 0x526 <check_valid_data+0x5a>
		return 6;
	if ((byte & 0x30) == 0x00)
 502:	41 15       	cp	r20, r1
 504:	51 05       	cpc	r21, r1
 506:	89 f0       	breq	.+34     	; 0x52a <check_valid_data+0x5e>
		return 7;
	if ((byte & 0x0C) == 0x00)
 508:	61 15       	cp	r22, r1
 50a:	71 05       	cpc	r23, r1
 50c:	81 f0       	breq	.+32     	; 0x52e <check_valid_data+0x62>
		return 8;
	if ((byte & 0x03) == 0x00)
 50e:	00 97       	sbiw	r24, 0x00	; 0
 510:	81 f4       	brne	.+32     	; 0x532 <check_valid_data+0x66>
		return 9;		
 512:	89 e0       	ldi	r24, 0x09	; 9
 514:	08 95       	ret

unsigned char check_valid_data(unsigned char byte)
{
	
	if ((byte & 0xC0) == 0xC0)
		return 2;
 516:	82 e0       	ldi	r24, 0x02	; 2
 518:	08 95       	ret
	if ((byte & 0x30) == 0x30)
		return 3;
 51a:	83 e0       	ldi	r24, 0x03	; 3
 51c:	08 95       	ret
	if ((byte & 0x0C) == 0x0C)
		return 4;
 51e:	84 e0       	ldi	r24, 0x04	; 4
 520:	08 95       	ret
	if ((byte & 0x03) == 0x03)
		return 5;
 522:	85 e0       	ldi	r24, 0x05	; 5
 524:	08 95       	ret
	if ((byte & 0xC0) == 0x00)
		return 6;
 526:	86 e0       	ldi	r24, 0x06	; 6
 528:	08 95       	ret
	if ((byte & 0x30) == 0x00)
		return 7;
 52a:	87 e0       	ldi	r24, 0x07	; 7
 52c:	08 95       	ret
	if ((byte & 0x0C) == 0x00)
		return 8;
 52e:	88 e0       	ldi	r24, 0x08	; 8
 530:	08 95       	ret
	if ((byte & 0x03) == 0x00)
		return 9;		
		
	return MAN_DATA_OK;
 532:	80 e0       	ldi	r24, 0x00	; 0
	
}
 534:	08 95       	ret

00000536 <rf_recv_msg>:
    UCSRB =((1<<RXEN) | (1<<TXEN)) ;
    UCSRC =((1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0));    
}

unsigned int rf_recv_msg(unsigned char *msg_buf)
{	
 536:	ef 92       	push	r14
 538:	ff 92       	push	r15
 53a:	0f 93       	push	r16
 53c:	1f 93       	push	r17
 53e:	cf 93       	push	r28
 540:	df 93       	push	r29
 542:	18 2f       	mov	r17, r24
 544:	09 2f       	mov	r16, r25
	
	unsigned char try = 0;
	unsigned char valid_man_data, rcvd_byte, high_nibble, low_nibble, rx_addr, tx_addr, msg_len, check_sum;	
	valid_man_data = MAN_DATA_KO;

		rcvd_byte= rf_recv_byte();
 546:	5e df       	rcall	.-324    	; 0x404 <rf_recv_byte>
 548:	c8 2f       	mov	r28, r24
		valid_man_data = check_valid_data(rcvd_byte);
 54a:	c0 df       	rcall	.-128    	; 0x4cc <check_valid_data>
 54c:	f8 2e       	mov	r15, r24
		high_nibble = man_decode (rcvd_byte);
 54e:	8c 2f       	mov	r24, r28
 550:	8f df       	rcall	.-226    	; 0x470 <man_decode>
		unsigned char rxadrtmp = RXADDR&0xF0;
		rxadrtmp = rxadrtmp >>4 ;
		if ((valid_man_data == MAN_DATA_OK) && (high_nibble ==rxadrtmp ))
 552:	ff 20       	and	r15, r15
 554:	39 f5       	brne	.+78     	; 0x5a4 <rf_recv_msg+0x6e>
 556:	8f 30       	cpi	r24, 0x0F	; 15
 558:	41 f5       	brne	.+80     	; 0x5aa <rf_recv_msg+0x74>
		{
			rcvd_byte = rf_recv_byte();
 55a:	54 df       	rcall	.-344    	; 0x404 <rf_recv_byte>
 55c:	c8 2f       	mov	r28, r24
			valid_man_data = check_valid_data(rcvd_byte);
 55e:	b6 df       	rcall	.-148    	; 0x4cc <check_valid_data>
 560:	f8 2e       	mov	r15, r24
			low_nibble = man_decode (rcvd_byte);
 562:	8c 2f       	mov	r24, r28
 564:	85 df       	rcall	.-246    	; 0x470 <man_decode>
			if ((valid_man_data == MAN_DATA_OK) && (low_nibble ==(RXADDR&0x0F) ))
 566:	ff 20       	and	r15, r15
 568:	19 f5       	brne	.+70     	; 0x5b0 <rf_recv_msg+0x7a>
 56a:	8f 30       	cpi	r24, 0x0F	; 15
 56c:	21 f5       	brne	.+72     	; 0x5b6 <rf_recv_msg+0x80>
				rx_addr = nibbles_to_byte(high_nibble, low_nibble);			
 56e:	6f e0       	ldi	r22, 0x0F	; 15
 570:	9e df       	rcall	.-196    	; 0x4ae <nibbles_to_byte>
 572:	c8 2f       	mov	r28, r24
				return RX_ADDR_ERR | 0x8000;
		}else
			return RX_ADDR_ERR | 0x8000;
		;	

	tx_addr = get_byte();	
 574:	a0 df       	rcall	.-192    	; 0x4b6 <get_byte>
	if (tx_addr != TXADDR)
 576:	81 30       	cpi	r24, 0x01	; 1
 578:	09 f5       	brne	.+66     	; 0x5bc <rf_recv_msg+0x86>
		return TX_ADDR_ERR | 0x8000;
		
	
	msg_len = get_byte();	
 57a:	9d df       	rcall	.-198    	; 0x4b6 <get_byte>
 57c:	e8 2e       	mov	r14, r24
	check_sum = rx_addr + tx_addr + msg_len;
 57e:	cf 5f       	subi	r28, 0xFF	; 255
 580:	fc 2e       	mov	r15, r28
 582:	f8 0e       	add	r15, r24
	
	for(unsigned char i=0; i < msg_len; i++)
 584:	c1 2f       	mov	r28, r17
 586:	d0 2f       	mov	r29, r16
 588:	03 c0       	rjmp	.+6      	; 0x590 <rf_recv_msg+0x5a>
	{
		rcvd_byte = get_byte();
 58a:	95 df       	rcall	.-214    	; 0x4b6 <get_byte>
		*(msg_buf++) = rcvd_byte;
 58c:	89 93       	st	Y+, r24
		check_sum += rcvd_byte;
 58e:	f8 0e       	add	r15, r24
		
	
	msg_len = get_byte();	
	check_sum = rx_addr + tx_addr + msg_len;
	
	for(unsigned char i=0; i < msg_len; i++)
 590:	8c 2f       	mov	r24, r28
 592:	81 1b       	sub	r24, r17
 594:	8e 15       	cp	r24, r14
 596:	c8 f3       	brcs	.-14     	; 0x58a <rf_recv_msg+0x54>
		check_sum += rcvd_byte;
	}

	
			
	if (check_sum != get_byte())
 598:	8e df       	rcall	.-228    	; 0x4b6 <get_byte>
 59a:	8f 15       	cp	r24, r15
 59c:	91 f4       	brne	.+36     	; 0x5c2 <rf_recv_msg+0x8c>
		return CHK_SUM_ERR | 0x8000;
		
	return msg_len;
 59e:	8e 2d       	mov	r24, r14
 5a0:	90 e0       	ldi	r25, 0x00	; 0
 5a2:	11 c0       	rjmp	.+34     	; 0x5c6 <rf_recv_msg+0x90>
			if ((valid_man_data == MAN_DATA_OK) && (low_nibble ==(RXADDR&0x0F) ))
				rx_addr = nibbles_to_byte(high_nibble, low_nibble);			
			else
				return RX_ADDR_ERR | 0x8000;
		}else
			return RX_ADDR_ERR | 0x8000;
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e8       	ldi	r25, 0x80	; 128
 5a8:	0e c0       	rjmp	.+28     	; 0x5c6 <rf_recv_msg+0x90>
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	90 e8       	ldi	r25, 0x80	; 128
 5ae:	0b c0       	rjmp	.+22     	; 0x5c6 <rf_recv_msg+0x90>
			valid_man_data = check_valid_data(rcvd_byte);
			low_nibble = man_decode (rcvd_byte);
			if ((valid_man_data == MAN_DATA_OK) && (low_nibble ==(RXADDR&0x0F) ))
				rx_addr = nibbles_to_byte(high_nibble, low_nibble);			
			else
				return RX_ADDR_ERR | 0x8000;
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	90 e8       	ldi	r25, 0x80	; 128
 5b4:	08 c0       	rjmp	.+16     	; 0x5c6 <rf_recv_msg+0x90>
 5b6:	81 e0       	ldi	r24, 0x01	; 1
 5b8:	90 e8       	ldi	r25, 0x80	; 128
 5ba:	05 c0       	rjmp	.+10     	; 0x5c6 <rf_recv_msg+0x90>
			return RX_ADDR_ERR | 0x8000;
		;	

	tx_addr = get_byte();	
	if (tx_addr != TXADDR)
		return TX_ADDR_ERR | 0x8000;
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	90 e8       	ldi	r25, 0x80	; 128
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <rf_recv_msg+0x90>
	}

	
			
	if (check_sum != get_byte())
		return CHK_SUM_ERR | 0x8000;
 5c2:	83 e0       	ldi	r24, 0x03	; 3
 5c4:	90 e8       	ldi	r25, 0x80	; 128
		
	return msg_len;
}
 5c6:	df 91       	pop	r29
 5c8:	cf 91       	pop	r28
 5ca:	1f 91       	pop	r17
 5cc:	0f 91       	pop	r16
 5ce:	ff 90       	pop	r15
 5d0:	ef 90       	pop	r14
 5d2:	08 95       	ret

000005d4 <preamble>:
	return MAN_DATA_OK;
	
}

void preamble(void)
{
 5d4:	80 e1       	ldi	r24, 0x10	; 16
	for(unsigned char i=0; i < START_STOP_BYTES; i++)
	{
		while((UCSRA&(1<<UDRE)) == 0);
		UDR = 0xF0;
 5d6:	90 ef       	ldi	r25, 0xF0	; 240

void preamble(void)
{
	for(unsigned char i=0; i < START_STOP_BYTES; i++)
	{
		while((UCSRA&(1<<UDRE)) == 0);
 5d8:	5d 9b       	sbis	0x0b, 5	; 11
 5da:	fe cf       	rjmp	.-4      	; 0x5d8 <preamble+0x4>
		UDR = 0xF0;
 5dc:	9c b9       	out	0x0c, r25	; 12
 5de:	81 50       	subi	r24, 0x01	; 1
	
}

void preamble(void)
{
	for(unsigned char i=0; i < START_STOP_BYTES; i++)
 5e0:	d9 f7       	brne	.-10     	; 0x5d8 <preamble+0x4>
	{
		while((UCSRA&(1<<UDRE)) == 0);
		UDR = 0xF0;
	}
}
 5e2:	08 95       	ret

000005e4 <rf_send_msg>:
	while((UCSRA&(1<<UDRE)) == 0);
	UDR = man_tx;
}

void rf_send_msg(unsigned char *msg_buf, unsigned char nbytes)
{
 5e4:	ff 92       	push	r15
 5e6:	0f 93       	push	r16
 5e8:	1f 93       	push	r17
 5ea:	cf 93       	push	r28
 5ec:	df 93       	push	r29
 5ee:	8c 01       	movw	r16, r24
 5f0:	f6 2e       	mov	r15, r22
	unsigned char i;
	rf_tx_enable();
 5f2:	fb de       	rcall	.-522    	; 0x3ea <rf_tx_enable>
	preamble();	
 5f4:	ef df       	rcall	.-34     	; 0x5d4 <preamble>
	rf_send_byte(RXADDR);
 5f6:	8f ef       	ldi	r24, 0xFF	; 255
 5f8:	2b df       	rcall	.-426    	; 0x450 <rf_send_byte>
	rf_send_byte(TXADDR);
 5fa:	81 e0       	ldi	r24, 0x01	; 1
 5fc:	29 df       	rcall	.-430    	; 0x450 <rf_send_byte>
	rf_send_byte(nbytes);
 5fe:	8f 2d       	mov	r24, r15
 600:	27 df       	rcall	.-434    	; 0x450 <rf_send_byte>
	unsigned char checksum = RXADDR + TXADDR + nbytes;
	for(i=0 ; i < nbytes; i++)
 602:	ff 20       	and	r15, r15
 604:	71 f0       	breq	.+28     	; 0x622 <rf_send_msg+0x3e>
	man_tx = man_encode (nibble);
	while((UCSRA&(1<<UDRE)) == 0);
	UDR = man_tx;
}

void rf_send_msg(unsigned char *msg_buf, unsigned char nbytes)
 606:	e8 01       	movw	r28, r16
 608:	21 96       	adiw	r28, 0x01	; 1
 60a:	8f 2d       	mov	r24, r15
 60c:	81 50       	subi	r24, 0x01	; 1
 60e:	c8 0f       	add	r28, r24
 610:	d1 1d       	adc	r29, r1
	rf_send_byte(TXADDR);
	rf_send_byte(nbytes);
	unsigned char checksum = RXADDR + TXADDR + nbytes;
	for(i=0 ; i < nbytes; i++)
	{
		checksum += *msg_buf;
 612:	f8 01       	movw	r30, r16
 614:	81 91       	ld	r24, Z+
 616:	8f 01       	movw	r16, r30
 618:	f8 0e       	add	r15, r24
		rf_send_byte(*msg_buf++);
 61a:	1a df       	rcall	.-460    	; 0x450 <rf_send_byte>
	preamble();	
	rf_send_byte(RXADDR);
	rf_send_byte(TXADDR);
	rf_send_byte(nbytes);
	unsigned char checksum = RXADDR + TXADDR + nbytes;
	for(i=0 ; i < nbytes; i++)
 61c:	0c 17       	cp	r16, r28
 61e:	1d 07       	cpc	r17, r29
 620:	c1 f7       	brne	.-16     	; 0x612 <rf_send_msg+0x2e>
	{
		checksum += *msg_buf;
		rf_send_byte(*msg_buf++);
	}
	rf_send_byte(checksum);
 622:	8f 2d       	mov	r24, r15
 624:	15 df       	rcall	.-470    	; 0x450 <rf_send_byte>
	rf_tx_disable();
 626:	ea de       	rcall	.-556    	; 0x3fc <rf_tx_disable>
}
 628:	df 91       	pop	r29
 62a:	cf 91       	pop	r28
 62c:	1f 91       	pop	r17
 62e:	0f 91       	pop	r16
 630:	ff 90       	pop	r15
 632:	08 95       	ret

00000634 <sprintf>:
 634:	ae e0       	ldi	r26, 0x0E	; 14
 636:	b0 e0       	ldi	r27, 0x00	; 0
 638:	ef e1       	ldi	r30, 0x1F	; 31
 63a:	f3 e0       	ldi	r31, 0x03	; 3
 63c:	97 c2       	rjmp	.+1326   	; 0xb6c <__prologue_saves__+0x1c>
 63e:	0d 89       	ldd	r16, Y+21	; 0x15
 640:	1e 89       	ldd	r17, Y+22	; 0x16
 642:	86 e0       	ldi	r24, 0x06	; 6
 644:	8c 83       	std	Y+4, r24	; 0x04
 646:	1a 83       	std	Y+2, r17	; 0x02
 648:	09 83       	std	Y+1, r16	; 0x01
 64a:	8f ef       	ldi	r24, 0xFF	; 255
 64c:	9f e7       	ldi	r25, 0x7F	; 127
 64e:	9e 83       	std	Y+6, r25	; 0x06
 650:	8d 83       	std	Y+5, r24	; 0x05
 652:	ae 01       	movw	r20, r28
 654:	47 5e       	subi	r20, 0xE7	; 231
 656:	5f 4f       	sbci	r21, 0xFF	; 255
 658:	ce 01       	movw	r24, r28
 65a:	01 96       	adiw	r24, 0x01	; 1
 65c:	6f 89       	ldd	r22, Y+23	; 0x17
 65e:	78 8d       	ldd	r23, Y+24	; 0x18
 660:	08 d0       	rcall	.+16     	; 0x672 <vfprintf>
 662:	ef 81       	ldd	r30, Y+7	; 0x07
 664:	f8 85       	ldd	r31, Y+8	; 0x08
 666:	e0 0f       	add	r30, r16
 668:	f1 1f       	adc	r31, r17
 66a:	10 82       	st	Z, r1
 66c:	2e 96       	adiw	r28, 0x0e	; 14
 66e:	e4 e0       	ldi	r30, 0x04	; 4
 670:	99 c2       	rjmp	.+1330   	; 0xba4 <__epilogue_restores__+0x1c>

00000672 <vfprintf>:
 672:	ad e0       	ldi	r26, 0x0D	; 13
 674:	b0 e0       	ldi	r27, 0x00	; 0
 676:	ee e3       	ldi	r30, 0x3E	; 62
 678:	f3 e0       	ldi	r31, 0x03	; 3
 67a:	6a c2       	rjmp	.+1236   	; 0xb50 <__prologue_saves__>
 67c:	3c 01       	movw	r6, r24
 67e:	7d 87       	std	Y+13, r23	; 0x0d
 680:	6c 87       	std	Y+12, r22	; 0x0c
 682:	5a 01       	movw	r10, r20
 684:	fc 01       	movw	r30, r24
 686:	17 82       	std	Z+7, r1	; 0x07
 688:	16 82       	std	Z+6, r1	; 0x06
 68a:	83 81       	ldd	r24, Z+3	; 0x03
 68c:	81 ff       	sbrs	r24, 1
 68e:	bb c1       	rjmp	.+886    	; 0xa06 <vfprintf+0x394>
 690:	2e 01       	movw	r4, r28
 692:	08 94       	sec
 694:	41 1c       	adc	r4, r1
 696:	51 1c       	adc	r5, r1
 698:	f3 01       	movw	r30, r6
 69a:	93 81       	ldd	r25, Z+3	; 0x03
 69c:	ec 85       	ldd	r30, Y+12	; 0x0c
 69e:	fd 85       	ldd	r31, Y+13	; 0x0d
 6a0:	93 fd       	sbrc	r25, 3
 6a2:	85 91       	lpm	r24, Z+
 6a4:	93 ff       	sbrs	r25, 3
 6a6:	81 91       	ld	r24, Z+
 6a8:	fd 87       	std	Y+13, r31	; 0x0d
 6aa:	ec 87       	std	Y+12, r30	; 0x0c
 6ac:	88 23       	and	r24, r24
 6ae:	09 f4       	brne	.+2      	; 0x6b2 <vfprintf+0x40>
 6b0:	a6 c1       	rjmp	.+844    	; 0x9fe <vfprintf+0x38c>
 6b2:	85 32       	cpi	r24, 0x25	; 37
 6b4:	41 f4       	brne	.+16     	; 0x6c6 <vfprintf+0x54>
 6b6:	93 fd       	sbrc	r25, 3
 6b8:	85 91       	lpm	r24, Z+
 6ba:	93 ff       	sbrs	r25, 3
 6bc:	81 91       	ld	r24, Z+
 6be:	fd 87       	std	Y+13, r31	; 0x0d
 6c0:	ec 87       	std	Y+12, r30	; 0x0c
 6c2:	85 32       	cpi	r24, 0x25	; 37
 6c4:	21 f4       	brne	.+8      	; 0x6ce <vfprintf+0x5c>
 6c6:	90 e0       	ldi	r25, 0x00	; 0
 6c8:	b3 01       	movw	r22, r6
 6ca:	b8 d1       	rcall	.+880    	; 0xa3c <fputc>
 6cc:	e5 cf       	rjmp	.-54     	; 0x698 <vfprintf+0x26>
 6ce:	ff 24       	eor	r15, r15
 6d0:	ee 24       	eor	r14, r14
 6d2:	10 e0       	ldi	r17, 0x00	; 0
 6d4:	10 32       	cpi	r17, 0x20	; 32
 6d6:	b0 f4       	brcc	.+44     	; 0x704 <vfprintf+0x92>
 6d8:	8b 32       	cpi	r24, 0x2B	; 43
 6da:	69 f0       	breq	.+26     	; 0x6f6 <vfprintf+0x84>
 6dc:	8c 32       	cpi	r24, 0x2C	; 44
 6de:	28 f4       	brcc	.+10     	; 0x6ea <vfprintf+0x78>
 6e0:	80 32       	cpi	r24, 0x20	; 32
 6e2:	51 f0       	breq	.+20     	; 0x6f8 <vfprintf+0x86>
 6e4:	83 32       	cpi	r24, 0x23	; 35
 6e6:	71 f4       	brne	.+28     	; 0x704 <vfprintf+0x92>
 6e8:	0b c0       	rjmp	.+22     	; 0x700 <vfprintf+0x8e>
 6ea:	8d 32       	cpi	r24, 0x2D	; 45
 6ec:	39 f0       	breq	.+14     	; 0x6fc <vfprintf+0x8a>
 6ee:	80 33       	cpi	r24, 0x30	; 48
 6f0:	49 f4       	brne	.+18     	; 0x704 <vfprintf+0x92>
 6f2:	11 60       	ori	r17, 0x01	; 1
 6f4:	2c c0       	rjmp	.+88     	; 0x74e <vfprintf+0xdc>
 6f6:	12 60       	ori	r17, 0x02	; 2
 6f8:	14 60       	ori	r17, 0x04	; 4
 6fa:	29 c0       	rjmp	.+82     	; 0x74e <vfprintf+0xdc>
 6fc:	18 60       	ori	r17, 0x08	; 8
 6fe:	27 c0       	rjmp	.+78     	; 0x74e <vfprintf+0xdc>
 700:	10 61       	ori	r17, 0x10	; 16
 702:	25 c0       	rjmp	.+74     	; 0x74e <vfprintf+0xdc>
 704:	17 fd       	sbrc	r17, 7
 706:	2e c0       	rjmp	.+92     	; 0x764 <vfprintf+0xf2>
 708:	28 2f       	mov	r18, r24
 70a:	20 53       	subi	r18, 0x30	; 48
 70c:	2a 30       	cpi	r18, 0x0A	; 10
 70e:	98 f4       	brcc	.+38     	; 0x736 <vfprintf+0xc4>
 710:	16 ff       	sbrs	r17, 6
 712:	08 c0       	rjmp	.+16     	; 0x724 <vfprintf+0xb2>
 714:	8f 2d       	mov	r24, r15
 716:	88 0f       	add	r24, r24
 718:	f8 2e       	mov	r15, r24
 71a:	ff 0c       	add	r15, r15
 71c:	ff 0c       	add	r15, r15
 71e:	f8 0e       	add	r15, r24
 720:	f2 0e       	add	r15, r18
 722:	15 c0       	rjmp	.+42     	; 0x74e <vfprintf+0xdc>
 724:	8e 2d       	mov	r24, r14
 726:	88 0f       	add	r24, r24
 728:	e8 2e       	mov	r14, r24
 72a:	ee 0c       	add	r14, r14
 72c:	ee 0c       	add	r14, r14
 72e:	e8 0e       	add	r14, r24
 730:	e2 0e       	add	r14, r18
 732:	10 62       	ori	r17, 0x20	; 32
 734:	0c c0       	rjmp	.+24     	; 0x74e <vfprintf+0xdc>
 736:	8e 32       	cpi	r24, 0x2E	; 46
 738:	21 f4       	brne	.+8      	; 0x742 <vfprintf+0xd0>
 73a:	16 fd       	sbrc	r17, 6
 73c:	60 c1       	rjmp	.+704    	; 0x9fe <vfprintf+0x38c>
 73e:	10 64       	ori	r17, 0x40	; 64
 740:	06 c0       	rjmp	.+12     	; 0x74e <vfprintf+0xdc>
 742:	8c 36       	cpi	r24, 0x6C	; 108
 744:	11 f4       	brne	.+4      	; 0x74a <vfprintf+0xd8>
 746:	10 68       	ori	r17, 0x80	; 128
 748:	02 c0       	rjmp	.+4      	; 0x74e <vfprintf+0xdc>
 74a:	88 36       	cpi	r24, 0x68	; 104
 74c:	59 f4       	brne	.+22     	; 0x764 <vfprintf+0xf2>
 74e:	ec 85       	ldd	r30, Y+12	; 0x0c
 750:	fd 85       	ldd	r31, Y+13	; 0x0d
 752:	93 fd       	sbrc	r25, 3
 754:	85 91       	lpm	r24, Z+
 756:	93 ff       	sbrs	r25, 3
 758:	81 91       	ld	r24, Z+
 75a:	fd 87       	std	Y+13, r31	; 0x0d
 75c:	ec 87       	std	Y+12, r30	; 0x0c
 75e:	88 23       	and	r24, r24
 760:	09 f0       	breq	.+2      	; 0x764 <vfprintf+0xf2>
 762:	b8 cf       	rjmp	.-144    	; 0x6d4 <vfprintf+0x62>
 764:	98 2f       	mov	r25, r24
 766:	95 54       	subi	r25, 0x45	; 69
 768:	93 30       	cpi	r25, 0x03	; 3
 76a:	18 f0       	brcs	.+6      	; 0x772 <vfprintf+0x100>
 76c:	90 52       	subi	r25, 0x20	; 32
 76e:	93 30       	cpi	r25, 0x03	; 3
 770:	38 f4       	brcc	.+14     	; 0x780 <vfprintf+0x10e>
 772:	24 e0       	ldi	r18, 0x04	; 4
 774:	30 e0       	ldi	r19, 0x00	; 0
 776:	a2 0e       	add	r10, r18
 778:	b3 1e       	adc	r11, r19
 77a:	3f e3       	ldi	r19, 0x3F	; 63
 77c:	39 83       	std	Y+1, r19	; 0x01
 77e:	0f c0       	rjmp	.+30     	; 0x79e <vfprintf+0x12c>
 780:	83 36       	cpi	r24, 0x63	; 99
 782:	31 f0       	breq	.+12     	; 0x790 <vfprintf+0x11e>
 784:	83 37       	cpi	r24, 0x73	; 115
 786:	81 f0       	breq	.+32     	; 0x7a8 <vfprintf+0x136>
 788:	83 35       	cpi	r24, 0x53	; 83
 78a:	09 f0       	breq	.+2      	; 0x78e <vfprintf+0x11c>
 78c:	56 c0       	rjmp	.+172    	; 0x83a <vfprintf+0x1c8>
 78e:	21 c0       	rjmp	.+66     	; 0x7d2 <vfprintf+0x160>
 790:	f5 01       	movw	r30, r10
 792:	80 81       	ld	r24, Z
 794:	89 83       	std	Y+1, r24	; 0x01
 796:	22 e0       	ldi	r18, 0x02	; 2
 798:	30 e0       	ldi	r19, 0x00	; 0
 79a:	a2 0e       	add	r10, r18
 79c:	b3 1e       	adc	r11, r19
 79e:	21 e0       	ldi	r18, 0x01	; 1
 7a0:	c2 2e       	mov	r12, r18
 7a2:	d1 2c       	mov	r13, r1
 7a4:	42 01       	movw	r8, r4
 7a6:	13 c0       	rjmp	.+38     	; 0x7ce <vfprintf+0x15c>
 7a8:	92 e0       	ldi	r25, 0x02	; 2
 7aa:	29 2e       	mov	r2, r25
 7ac:	31 2c       	mov	r3, r1
 7ae:	2a 0c       	add	r2, r10
 7b0:	3b 1c       	adc	r3, r11
 7b2:	f5 01       	movw	r30, r10
 7b4:	80 80       	ld	r8, Z
 7b6:	91 80       	ldd	r9, Z+1	; 0x01
 7b8:	16 ff       	sbrs	r17, 6
 7ba:	03 c0       	rjmp	.+6      	; 0x7c2 <vfprintf+0x150>
 7bc:	6f 2d       	mov	r22, r15
 7be:	70 e0       	ldi	r23, 0x00	; 0
 7c0:	02 c0       	rjmp	.+4      	; 0x7c6 <vfprintf+0x154>
 7c2:	6f ef       	ldi	r22, 0xFF	; 255
 7c4:	7f ef       	ldi	r23, 0xFF	; 255
 7c6:	c4 01       	movw	r24, r8
 7c8:	2e d1       	rcall	.+604    	; 0xa26 <strnlen>
 7ca:	6c 01       	movw	r12, r24
 7cc:	51 01       	movw	r10, r2
 7ce:	1f 77       	andi	r17, 0x7F	; 127
 7d0:	14 c0       	rjmp	.+40     	; 0x7fa <vfprintf+0x188>
 7d2:	82 e0       	ldi	r24, 0x02	; 2
 7d4:	28 2e       	mov	r2, r24
 7d6:	31 2c       	mov	r3, r1
 7d8:	2a 0c       	add	r2, r10
 7da:	3b 1c       	adc	r3, r11
 7dc:	f5 01       	movw	r30, r10
 7de:	80 80       	ld	r8, Z
 7e0:	91 80       	ldd	r9, Z+1	; 0x01
 7e2:	16 ff       	sbrs	r17, 6
 7e4:	03 c0       	rjmp	.+6      	; 0x7ec <vfprintf+0x17a>
 7e6:	6f 2d       	mov	r22, r15
 7e8:	70 e0       	ldi	r23, 0x00	; 0
 7ea:	02 c0       	rjmp	.+4      	; 0x7f0 <vfprintf+0x17e>
 7ec:	6f ef       	ldi	r22, 0xFF	; 255
 7ee:	7f ef       	ldi	r23, 0xFF	; 255
 7f0:	c4 01       	movw	r24, r8
 7f2:	0e d1       	rcall	.+540    	; 0xa10 <strnlen_P>
 7f4:	6c 01       	movw	r12, r24
 7f6:	10 68       	ori	r17, 0x80	; 128
 7f8:	51 01       	movw	r10, r2
 7fa:	13 fd       	sbrc	r17, 3
 7fc:	1a c0       	rjmp	.+52     	; 0x832 <vfprintf+0x1c0>
 7fe:	05 c0       	rjmp	.+10     	; 0x80a <vfprintf+0x198>
 800:	80 e2       	ldi	r24, 0x20	; 32
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	b3 01       	movw	r22, r6
 806:	1a d1       	rcall	.+564    	; 0xa3c <fputc>
 808:	ea 94       	dec	r14
 80a:	8e 2d       	mov	r24, r14
 80c:	90 e0       	ldi	r25, 0x00	; 0
 80e:	c8 16       	cp	r12, r24
 810:	d9 06       	cpc	r13, r25
 812:	b0 f3       	brcs	.-20     	; 0x800 <vfprintf+0x18e>
 814:	0e c0       	rjmp	.+28     	; 0x832 <vfprintf+0x1c0>
 816:	f4 01       	movw	r30, r8
 818:	17 fd       	sbrc	r17, 7
 81a:	85 91       	lpm	r24, Z+
 81c:	17 ff       	sbrs	r17, 7
 81e:	81 91       	ld	r24, Z+
 820:	4f 01       	movw	r8, r30
 822:	90 e0       	ldi	r25, 0x00	; 0
 824:	b3 01       	movw	r22, r6
 826:	0a d1       	rcall	.+532    	; 0xa3c <fputc>
 828:	e1 10       	cpse	r14, r1
 82a:	ea 94       	dec	r14
 82c:	08 94       	sec
 82e:	c1 08       	sbc	r12, r1
 830:	d1 08       	sbc	r13, r1
 832:	c1 14       	cp	r12, r1
 834:	d1 04       	cpc	r13, r1
 836:	79 f7       	brne	.-34     	; 0x816 <vfprintf+0x1a4>
 838:	df c0       	rjmp	.+446    	; 0x9f8 <vfprintf+0x386>
 83a:	84 36       	cpi	r24, 0x64	; 100
 83c:	11 f0       	breq	.+4      	; 0x842 <vfprintf+0x1d0>
 83e:	89 36       	cpi	r24, 0x69	; 105
 840:	49 f5       	brne	.+82     	; 0x894 <vfprintf+0x222>
 842:	f5 01       	movw	r30, r10
 844:	17 ff       	sbrs	r17, 7
 846:	07 c0       	rjmp	.+14     	; 0x856 <vfprintf+0x1e4>
 848:	80 81       	ld	r24, Z
 84a:	91 81       	ldd	r25, Z+1	; 0x01
 84c:	a2 81       	ldd	r26, Z+2	; 0x02
 84e:	b3 81       	ldd	r27, Z+3	; 0x03
 850:	24 e0       	ldi	r18, 0x04	; 4
 852:	30 e0       	ldi	r19, 0x00	; 0
 854:	08 c0       	rjmp	.+16     	; 0x866 <vfprintf+0x1f4>
 856:	80 81       	ld	r24, Z
 858:	91 81       	ldd	r25, Z+1	; 0x01
 85a:	aa 27       	eor	r26, r26
 85c:	97 fd       	sbrc	r25, 7
 85e:	a0 95       	com	r26
 860:	ba 2f       	mov	r27, r26
 862:	22 e0       	ldi	r18, 0x02	; 2
 864:	30 e0       	ldi	r19, 0x00	; 0
 866:	a2 0e       	add	r10, r18
 868:	b3 1e       	adc	r11, r19
 86a:	01 2f       	mov	r16, r17
 86c:	0f 76       	andi	r16, 0x6F	; 111
 86e:	b7 ff       	sbrs	r27, 7
 870:	08 c0       	rjmp	.+16     	; 0x882 <vfprintf+0x210>
 872:	b0 95       	com	r27
 874:	a0 95       	com	r26
 876:	90 95       	com	r25
 878:	81 95       	neg	r24
 87a:	9f 4f       	sbci	r25, 0xFF	; 255
 87c:	af 4f       	sbci	r26, 0xFF	; 255
 87e:	bf 4f       	sbci	r27, 0xFF	; 255
 880:	00 68       	ori	r16, 0x80	; 128
 882:	bc 01       	movw	r22, r24
 884:	cd 01       	movw	r24, r26
 886:	a2 01       	movw	r20, r4
 888:	2a e0       	ldi	r18, 0x0A	; 10
 88a:	30 e0       	ldi	r19, 0x00	; 0
 88c:	03 d1       	rcall	.+518    	; 0xa94 <__ultoa_invert>
 88e:	d8 2e       	mov	r13, r24
 890:	d4 18       	sub	r13, r4
 892:	3e c0       	rjmp	.+124    	; 0x910 <vfprintf+0x29e>
 894:	85 37       	cpi	r24, 0x75	; 117
 896:	21 f4       	brne	.+8      	; 0x8a0 <vfprintf+0x22e>
 898:	1f 7e       	andi	r17, 0xEF	; 239
 89a:	2a e0       	ldi	r18, 0x0A	; 10
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	20 c0       	rjmp	.+64     	; 0x8e0 <vfprintf+0x26e>
 8a0:	19 7f       	andi	r17, 0xF9	; 249
 8a2:	8f 36       	cpi	r24, 0x6F	; 111
 8a4:	a9 f0       	breq	.+42     	; 0x8d0 <vfprintf+0x25e>
 8a6:	80 37       	cpi	r24, 0x70	; 112
 8a8:	20 f4       	brcc	.+8      	; 0x8b2 <vfprintf+0x240>
 8aa:	88 35       	cpi	r24, 0x58	; 88
 8ac:	09 f0       	breq	.+2      	; 0x8b0 <vfprintf+0x23e>
 8ae:	a7 c0       	rjmp	.+334    	; 0x9fe <vfprintf+0x38c>
 8b0:	0b c0       	rjmp	.+22     	; 0x8c8 <vfprintf+0x256>
 8b2:	80 37       	cpi	r24, 0x70	; 112
 8b4:	21 f0       	breq	.+8      	; 0x8be <vfprintf+0x24c>
 8b6:	88 37       	cpi	r24, 0x78	; 120
 8b8:	09 f0       	breq	.+2      	; 0x8bc <vfprintf+0x24a>
 8ba:	a1 c0       	rjmp	.+322    	; 0x9fe <vfprintf+0x38c>
 8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <vfprintf+0x24e>
 8be:	10 61       	ori	r17, 0x10	; 16
 8c0:	14 ff       	sbrs	r17, 4
 8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <vfprintf+0x264>
 8c4:	14 60       	ori	r17, 0x04	; 4
 8c6:	07 c0       	rjmp	.+14     	; 0x8d6 <vfprintf+0x264>
 8c8:	14 ff       	sbrs	r17, 4
 8ca:	08 c0       	rjmp	.+16     	; 0x8dc <vfprintf+0x26a>
 8cc:	16 60       	ori	r17, 0x06	; 6
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <vfprintf+0x26a>
 8d0:	28 e0       	ldi	r18, 0x08	; 8
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <vfprintf+0x26e>
 8d6:	20 e1       	ldi	r18, 0x10	; 16
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <vfprintf+0x26e>
 8dc:	20 e1       	ldi	r18, 0x10	; 16
 8de:	32 e0       	ldi	r19, 0x02	; 2
 8e0:	f5 01       	movw	r30, r10
 8e2:	17 ff       	sbrs	r17, 7
 8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <vfprintf+0x282>
 8e6:	60 81       	ld	r22, Z
 8e8:	71 81       	ldd	r23, Z+1	; 0x01
 8ea:	82 81       	ldd	r24, Z+2	; 0x02
 8ec:	93 81       	ldd	r25, Z+3	; 0x03
 8ee:	44 e0       	ldi	r20, 0x04	; 4
 8f0:	50 e0       	ldi	r21, 0x00	; 0
 8f2:	06 c0       	rjmp	.+12     	; 0x900 <vfprintf+0x28e>
 8f4:	60 81       	ld	r22, Z
 8f6:	71 81       	ldd	r23, Z+1	; 0x01
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	42 e0       	ldi	r20, 0x02	; 2
 8fe:	50 e0       	ldi	r21, 0x00	; 0
 900:	a4 0e       	add	r10, r20
 902:	b5 1e       	adc	r11, r21
 904:	a2 01       	movw	r20, r4
 906:	c6 d0       	rcall	.+396    	; 0xa94 <__ultoa_invert>
 908:	d8 2e       	mov	r13, r24
 90a:	d4 18       	sub	r13, r4
 90c:	01 2f       	mov	r16, r17
 90e:	0f 77       	andi	r16, 0x7F	; 127
 910:	06 ff       	sbrs	r16, 6
 912:	09 c0       	rjmp	.+18     	; 0x926 <vfprintf+0x2b4>
 914:	0e 7f       	andi	r16, 0xFE	; 254
 916:	df 14       	cp	r13, r15
 918:	30 f4       	brcc	.+12     	; 0x926 <vfprintf+0x2b4>
 91a:	04 ff       	sbrs	r16, 4
 91c:	06 c0       	rjmp	.+12     	; 0x92a <vfprintf+0x2b8>
 91e:	02 fd       	sbrc	r16, 2
 920:	04 c0       	rjmp	.+8      	; 0x92a <vfprintf+0x2b8>
 922:	0f 7e       	andi	r16, 0xEF	; 239
 924:	02 c0       	rjmp	.+4      	; 0x92a <vfprintf+0x2b8>
 926:	1d 2d       	mov	r17, r13
 928:	01 c0       	rjmp	.+2      	; 0x92c <vfprintf+0x2ba>
 92a:	1f 2d       	mov	r17, r15
 92c:	80 2f       	mov	r24, r16
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	04 ff       	sbrs	r16, 4
 932:	0c c0       	rjmp	.+24     	; 0x94c <vfprintf+0x2da>
 934:	fe 01       	movw	r30, r28
 936:	ed 0d       	add	r30, r13
 938:	f1 1d       	adc	r31, r1
 93a:	20 81       	ld	r18, Z
 93c:	20 33       	cpi	r18, 0x30	; 48
 93e:	11 f4       	brne	.+4      	; 0x944 <vfprintf+0x2d2>
 940:	09 7e       	andi	r16, 0xE9	; 233
 942:	09 c0       	rjmp	.+18     	; 0x956 <vfprintf+0x2e4>
 944:	02 ff       	sbrs	r16, 2
 946:	06 c0       	rjmp	.+12     	; 0x954 <vfprintf+0x2e2>
 948:	1e 5f       	subi	r17, 0xFE	; 254
 94a:	05 c0       	rjmp	.+10     	; 0x956 <vfprintf+0x2e4>
 94c:	86 78       	andi	r24, 0x86	; 134
 94e:	90 70       	andi	r25, 0x00	; 0
 950:	00 97       	sbiw	r24, 0x00	; 0
 952:	09 f0       	breq	.+2      	; 0x956 <vfprintf+0x2e4>
 954:	1f 5f       	subi	r17, 0xFF	; 255
 956:	80 2e       	mov	r8, r16
 958:	99 24       	eor	r9, r9
 95a:	03 fd       	sbrc	r16, 3
 95c:	11 c0       	rjmp	.+34     	; 0x980 <vfprintf+0x30e>
 95e:	00 ff       	sbrs	r16, 0
 960:	0c c0       	rjmp	.+24     	; 0x97a <vfprintf+0x308>
 962:	fd 2c       	mov	r15, r13
 964:	1e 15       	cp	r17, r14
 966:	48 f4       	brcc	.+18     	; 0x97a <vfprintf+0x308>
 968:	fe 0c       	add	r15, r14
 96a:	f1 1a       	sub	r15, r17
 96c:	1e 2d       	mov	r17, r14
 96e:	05 c0       	rjmp	.+10     	; 0x97a <vfprintf+0x308>
 970:	80 e2       	ldi	r24, 0x20	; 32
 972:	90 e0       	ldi	r25, 0x00	; 0
 974:	b3 01       	movw	r22, r6
 976:	62 d0       	rcall	.+196    	; 0xa3c <fputc>
 978:	1f 5f       	subi	r17, 0xFF	; 255
 97a:	1e 15       	cp	r17, r14
 97c:	c8 f3       	brcs	.-14     	; 0x970 <vfprintf+0x2fe>
 97e:	04 c0       	rjmp	.+8      	; 0x988 <vfprintf+0x316>
 980:	1e 15       	cp	r17, r14
 982:	10 f4       	brcc	.+4      	; 0x988 <vfprintf+0x316>
 984:	e1 1a       	sub	r14, r17
 986:	01 c0       	rjmp	.+2      	; 0x98a <vfprintf+0x318>
 988:	ee 24       	eor	r14, r14
 98a:	84 fe       	sbrs	r8, 4
 98c:	0e c0       	rjmp	.+28     	; 0x9aa <vfprintf+0x338>
 98e:	80 e3       	ldi	r24, 0x30	; 48
 990:	90 e0       	ldi	r25, 0x00	; 0
 992:	b3 01       	movw	r22, r6
 994:	53 d0       	rcall	.+166    	; 0xa3c <fputc>
 996:	82 fe       	sbrs	r8, 2
 998:	1d c0       	rjmp	.+58     	; 0x9d4 <vfprintf+0x362>
 99a:	81 fe       	sbrs	r8, 1
 99c:	03 c0       	rjmp	.+6      	; 0x9a4 <vfprintf+0x332>
 99e:	88 e5       	ldi	r24, 0x58	; 88
 9a0:	90 e0       	ldi	r25, 0x00	; 0
 9a2:	10 c0       	rjmp	.+32     	; 0x9c4 <vfprintf+0x352>
 9a4:	88 e7       	ldi	r24, 0x78	; 120
 9a6:	90 e0       	ldi	r25, 0x00	; 0
 9a8:	0d c0       	rjmp	.+26     	; 0x9c4 <vfprintf+0x352>
 9aa:	c4 01       	movw	r24, r8
 9ac:	86 78       	andi	r24, 0x86	; 134
 9ae:	90 70       	andi	r25, 0x00	; 0
 9b0:	00 97       	sbiw	r24, 0x00	; 0
 9b2:	81 f0       	breq	.+32     	; 0x9d4 <vfprintf+0x362>
 9b4:	81 fc       	sbrc	r8, 1
 9b6:	02 c0       	rjmp	.+4      	; 0x9bc <vfprintf+0x34a>
 9b8:	80 e2       	ldi	r24, 0x20	; 32
 9ba:	01 c0       	rjmp	.+2      	; 0x9be <vfprintf+0x34c>
 9bc:	8b e2       	ldi	r24, 0x2B	; 43
 9be:	07 fd       	sbrc	r16, 7
 9c0:	8d e2       	ldi	r24, 0x2D	; 45
 9c2:	90 e0       	ldi	r25, 0x00	; 0
 9c4:	b3 01       	movw	r22, r6
 9c6:	3a d0       	rcall	.+116    	; 0xa3c <fputc>
 9c8:	05 c0       	rjmp	.+10     	; 0x9d4 <vfprintf+0x362>
 9ca:	80 e3       	ldi	r24, 0x30	; 48
 9cc:	90 e0       	ldi	r25, 0x00	; 0
 9ce:	b3 01       	movw	r22, r6
 9d0:	35 d0       	rcall	.+106    	; 0xa3c <fputc>
 9d2:	fa 94       	dec	r15
 9d4:	df 14       	cp	r13, r15
 9d6:	c8 f3       	brcs	.-14     	; 0x9ca <vfprintf+0x358>
 9d8:	da 94       	dec	r13
 9da:	f2 01       	movw	r30, r4
 9dc:	ed 0d       	add	r30, r13
 9de:	f1 1d       	adc	r31, r1
 9e0:	80 81       	ld	r24, Z
 9e2:	90 e0       	ldi	r25, 0x00	; 0
 9e4:	b3 01       	movw	r22, r6
 9e6:	2a d0       	rcall	.+84     	; 0xa3c <fputc>
 9e8:	dd 20       	and	r13, r13
 9ea:	b1 f7       	brne	.-20     	; 0x9d8 <vfprintf+0x366>
 9ec:	05 c0       	rjmp	.+10     	; 0x9f8 <vfprintf+0x386>
 9ee:	80 e2       	ldi	r24, 0x20	; 32
 9f0:	90 e0       	ldi	r25, 0x00	; 0
 9f2:	b3 01       	movw	r22, r6
 9f4:	23 d0       	rcall	.+70     	; 0xa3c <fputc>
 9f6:	ea 94       	dec	r14
 9f8:	ee 20       	and	r14, r14
 9fa:	c9 f7       	brne	.-14     	; 0x9ee <vfprintf+0x37c>
 9fc:	4d ce       	rjmp	.-870    	; 0x698 <vfprintf+0x26>
 9fe:	f3 01       	movw	r30, r6
 a00:	86 81       	ldd	r24, Z+6	; 0x06
 a02:	97 81       	ldd	r25, Z+7	; 0x07
 a04:	02 c0       	rjmp	.+4      	; 0xa0a <vfprintf+0x398>
 a06:	8f ef       	ldi	r24, 0xFF	; 255
 a08:	9f ef       	ldi	r25, 0xFF	; 255
 a0a:	2d 96       	adiw	r28, 0x0d	; 13
 a0c:	e2 e1       	ldi	r30, 0x12	; 18
 a0e:	bc c0       	rjmp	.+376    	; 0xb88 <__epilogue_restores__>

00000a10 <strnlen_P>:
 a10:	fc 01       	movw	r30, r24
 a12:	05 90       	lpm	r0, Z+
 a14:	61 50       	subi	r22, 0x01	; 1
 a16:	70 40       	sbci	r23, 0x00	; 0
 a18:	01 10       	cpse	r0, r1
 a1a:	d8 f7       	brcc	.-10     	; 0xa12 <strnlen_P+0x2>
 a1c:	80 95       	com	r24
 a1e:	90 95       	com	r25
 a20:	8e 0f       	add	r24, r30
 a22:	9f 1f       	adc	r25, r31
 a24:	08 95       	ret

00000a26 <strnlen>:
 a26:	fc 01       	movw	r30, r24
 a28:	61 50       	subi	r22, 0x01	; 1
 a2a:	70 40       	sbci	r23, 0x00	; 0
 a2c:	01 90       	ld	r0, Z+
 a2e:	01 10       	cpse	r0, r1
 a30:	d8 f7       	brcc	.-10     	; 0xa28 <strnlen+0x2>
 a32:	80 95       	com	r24
 a34:	90 95       	com	r25
 a36:	8e 0f       	add	r24, r30
 a38:	9f 1f       	adc	r25, r31
 a3a:	08 95       	ret

00000a3c <fputc>:
 a3c:	0f 93       	push	r16
 a3e:	1f 93       	push	r17
 a40:	cf 93       	push	r28
 a42:	df 93       	push	r29
 a44:	8c 01       	movw	r16, r24
 a46:	eb 01       	movw	r28, r22
 a48:	8b 81       	ldd	r24, Y+3	; 0x03
 a4a:	81 ff       	sbrs	r24, 1
 a4c:	1b c0       	rjmp	.+54     	; 0xa84 <fputc+0x48>
 a4e:	82 ff       	sbrs	r24, 2
 a50:	0d c0       	rjmp	.+26     	; 0xa6c <fputc+0x30>
 a52:	2e 81       	ldd	r18, Y+6	; 0x06
 a54:	3f 81       	ldd	r19, Y+7	; 0x07
 a56:	8c 81       	ldd	r24, Y+4	; 0x04
 a58:	9d 81       	ldd	r25, Y+5	; 0x05
 a5a:	28 17       	cp	r18, r24
 a5c:	39 07       	cpc	r19, r25
 a5e:	64 f4       	brge	.+24     	; 0xa78 <fputc+0x3c>
 a60:	e8 81       	ld	r30, Y
 a62:	f9 81       	ldd	r31, Y+1	; 0x01
 a64:	01 93       	st	Z+, r16
 a66:	f9 83       	std	Y+1, r31	; 0x01
 a68:	e8 83       	st	Y, r30
 a6a:	06 c0       	rjmp	.+12     	; 0xa78 <fputc+0x3c>
 a6c:	e8 85       	ldd	r30, Y+8	; 0x08
 a6e:	f9 85       	ldd	r31, Y+9	; 0x09
 a70:	80 2f       	mov	r24, r16
 a72:	09 95       	icall
 a74:	00 97       	sbiw	r24, 0x00	; 0
 a76:	31 f4       	brne	.+12     	; 0xa84 <fputc+0x48>
 a78:	8e 81       	ldd	r24, Y+6	; 0x06
 a7a:	9f 81       	ldd	r25, Y+7	; 0x07
 a7c:	01 96       	adiw	r24, 0x01	; 1
 a7e:	9f 83       	std	Y+7, r25	; 0x07
 a80:	8e 83       	std	Y+6, r24	; 0x06
 a82:	02 c0       	rjmp	.+4      	; 0xa88 <fputc+0x4c>
 a84:	0f ef       	ldi	r16, 0xFF	; 255
 a86:	1f ef       	ldi	r17, 0xFF	; 255
 a88:	c8 01       	movw	r24, r16
 a8a:	df 91       	pop	r29
 a8c:	cf 91       	pop	r28
 a8e:	1f 91       	pop	r17
 a90:	0f 91       	pop	r16
 a92:	08 95       	ret

00000a94 <__ultoa_invert>:
 a94:	fa 01       	movw	r30, r20
 a96:	aa 27       	eor	r26, r26
 a98:	28 30       	cpi	r18, 0x08	; 8
 a9a:	51 f1       	breq	.+84     	; 0xaf0 <__ultoa_invert+0x5c>
 a9c:	20 31       	cpi	r18, 0x10	; 16
 a9e:	81 f1       	breq	.+96     	; 0xb00 <__ultoa_invert+0x6c>
 aa0:	e8 94       	clt
 aa2:	6f 93       	push	r22
 aa4:	6e 7f       	andi	r22, 0xFE	; 254
 aa6:	6e 5f       	subi	r22, 0xFE	; 254
 aa8:	7f 4f       	sbci	r23, 0xFF	; 255
 aaa:	8f 4f       	sbci	r24, 0xFF	; 255
 aac:	9f 4f       	sbci	r25, 0xFF	; 255
 aae:	af 4f       	sbci	r26, 0xFF	; 255
 ab0:	b1 e0       	ldi	r27, 0x01	; 1
 ab2:	3e d0       	rcall	.+124    	; 0xb30 <__ultoa_invert+0x9c>
 ab4:	b4 e0       	ldi	r27, 0x04	; 4
 ab6:	3c d0       	rcall	.+120    	; 0xb30 <__ultoa_invert+0x9c>
 ab8:	67 0f       	add	r22, r23
 aba:	78 1f       	adc	r23, r24
 abc:	89 1f       	adc	r24, r25
 abe:	9a 1f       	adc	r25, r26
 ac0:	a1 1d       	adc	r26, r1
 ac2:	68 0f       	add	r22, r24
 ac4:	79 1f       	adc	r23, r25
 ac6:	8a 1f       	adc	r24, r26
 ac8:	91 1d       	adc	r25, r1
 aca:	a1 1d       	adc	r26, r1
 acc:	6a 0f       	add	r22, r26
 ace:	71 1d       	adc	r23, r1
 ad0:	81 1d       	adc	r24, r1
 ad2:	91 1d       	adc	r25, r1
 ad4:	a1 1d       	adc	r26, r1
 ad6:	20 d0       	rcall	.+64     	; 0xb18 <__ultoa_invert+0x84>
 ad8:	09 f4       	brne	.+2      	; 0xadc <__ultoa_invert+0x48>
 ada:	68 94       	set
 adc:	3f 91       	pop	r19
 ade:	2a e0       	ldi	r18, 0x0A	; 10
 ae0:	26 9f       	mul	r18, r22
 ae2:	11 24       	eor	r1, r1
 ae4:	30 19       	sub	r19, r0
 ae6:	30 5d       	subi	r19, 0xD0	; 208
 ae8:	31 93       	st	Z+, r19
 aea:	de f6       	brtc	.-74     	; 0xaa2 <__ultoa_invert+0xe>
 aec:	cf 01       	movw	r24, r30
 aee:	08 95       	ret
 af0:	46 2f       	mov	r20, r22
 af2:	47 70       	andi	r20, 0x07	; 7
 af4:	40 5d       	subi	r20, 0xD0	; 208
 af6:	41 93       	st	Z+, r20
 af8:	b3 e0       	ldi	r27, 0x03	; 3
 afa:	0f d0       	rcall	.+30     	; 0xb1a <__ultoa_invert+0x86>
 afc:	c9 f7       	brne	.-14     	; 0xaf0 <__ultoa_invert+0x5c>
 afe:	f6 cf       	rjmp	.-20     	; 0xaec <__ultoa_invert+0x58>
 b00:	46 2f       	mov	r20, r22
 b02:	4f 70       	andi	r20, 0x0F	; 15
 b04:	40 5d       	subi	r20, 0xD0	; 208
 b06:	4a 33       	cpi	r20, 0x3A	; 58
 b08:	18 f0       	brcs	.+6      	; 0xb10 <__ultoa_invert+0x7c>
 b0a:	49 5d       	subi	r20, 0xD9	; 217
 b0c:	31 fd       	sbrc	r19, 1
 b0e:	40 52       	subi	r20, 0x20	; 32
 b10:	41 93       	st	Z+, r20
 b12:	02 d0       	rcall	.+4      	; 0xb18 <__ultoa_invert+0x84>
 b14:	a9 f7       	brne	.-22     	; 0xb00 <__ultoa_invert+0x6c>
 b16:	ea cf       	rjmp	.-44     	; 0xaec <__ultoa_invert+0x58>
 b18:	b4 e0       	ldi	r27, 0x04	; 4
 b1a:	a6 95       	lsr	r26
 b1c:	97 95       	ror	r25
 b1e:	87 95       	ror	r24
 b20:	77 95       	ror	r23
 b22:	67 95       	ror	r22
 b24:	ba 95       	dec	r27
 b26:	c9 f7       	brne	.-14     	; 0xb1a <__ultoa_invert+0x86>
 b28:	00 97       	sbiw	r24, 0x00	; 0
 b2a:	61 05       	cpc	r22, r1
 b2c:	71 05       	cpc	r23, r1
 b2e:	08 95       	ret
 b30:	9b 01       	movw	r18, r22
 b32:	ac 01       	movw	r20, r24
 b34:	0a 2e       	mov	r0, r26
 b36:	06 94       	lsr	r0
 b38:	57 95       	ror	r21
 b3a:	47 95       	ror	r20
 b3c:	37 95       	ror	r19
 b3e:	27 95       	ror	r18
 b40:	ba 95       	dec	r27
 b42:	c9 f7       	brne	.-14     	; 0xb36 <__ultoa_invert+0xa2>
 b44:	62 0f       	add	r22, r18
 b46:	73 1f       	adc	r23, r19
 b48:	84 1f       	adc	r24, r20
 b4a:	95 1f       	adc	r25, r21
 b4c:	a0 1d       	adc	r26, r0
 b4e:	08 95       	ret

00000b50 <__prologue_saves__>:
 b50:	2f 92       	push	r2
 b52:	3f 92       	push	r3
 b54:	4f 92       	push	r4
 b56:	5f 92       	push	r5
 b58:	6f 92       	push	r6
 b5a:	7f 92       	push	r7
 b5c:	8f 92       	push	r8
 b5e:	9f 92       	push	r9
 b60:	af 92       	push	r10
 b62:	bf 92       	push	r11
 b64:	cf 92       	push	r12
 b66:	df 92       	push	r13
 b68:	ef 92       	push	r14
 b6a:	ff 92       	push	r15
 b6c:	0f 93       	push	r16
 b6e:	1f 93       	push	r17
 b70:	cf 93       	push	r28
 b72:	df 93       	push	r29
 b74:	cd b7       	in	r28, 0x3d	; 61
 b76:	de b7       	in	r29, 0x3e	; 62
 b78:	ca 1b       	sub	r28, r26
 b7a:	db 0b       	sbc	r29, r27
 b7c:	0f b6       	in	r0, 0x3f	; 63
 b7e:	f8 94       	cli
 b80:	de bf       	out	0x3e, r29	; 62
 b82:	0f be       	out	0x3f, r0	; 63
 b84:	cd bf       	out	0x3d, r28	; 61
 b86:	09 94       	ijmp

00000b88 <__epilogue_restores__>:
 b88:	2a 88       	ldd	r2, Y+18	; 0x12
 b8a:	39 88       	ldd	r3, Y+17	; 0x11
 b8c:	48 88       	ldd	r4, Y+16	; 0x10
 b8e:	5f 84       	ldd	r5, Y+15	; 0x0f
 b90:	6e 84       	ldd	r6, Y+14	; 0x0e
 b92:	7d 84       	ldd	r7, Y+13	; 0x0d
 b94:	8c 84       	ldd	r8, Y+12	; 0x0c
 b96:	9b 84       	ldd	r9, Y+11	; 0x0b
 b98:	aa 84       	ldd	r10, Y+10	; 0x0a
 b9a:	b9 84       	ldd	r11, Y+9	; 0x09
 b9c:	c8 84       	ldd	r12, Y+8	; 0x08
 b9e:	df 80       	ldd	r13, Y+7	; 0x07
 ba0:	ee 80       	ldd	r14, Y+6	; 0x06
 ba2:	fd 80       	ldd	r15, Y+5	; 0x05
 ba4:	0c 81       	ldd	r16, Y+4	; 0x04
 ba6:	1b 81       	ldd	r17, Y+3	; 0x03
 ba8:	aa 81       	ldd	r26, Y+2	; 0x02
 baa:	b9 81       	ldd	r27, Y+1	; 0x01
 bac:	ce 0f       	add	r28, r30
 bae:	d1 1d       	adc	r29, r1
 bb0:	0f b6       	in	r0, 0x3f	; 63
 bb2:	f8 94       	cli
 bb4:	de bf       	out	0x3e, r29	; 62
 bb6:	0f be       	out	0x3f, r0	; 63
 bb8:	cd bf       	out	0x3d, r28	; 61
 bba:	ed 01       	movw	r28, r26
 bbc:	08 95       	ret

00000bbe <_exit>:
 bbe:	f8 94       	cli

00000bc0 <__stop_program>:
 bc0:	ff cf       	rjmp	.-2      	; 0xbc0 <__stop_program>
