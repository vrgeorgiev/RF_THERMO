
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003cc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000003cc  00000440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00000440  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00000b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000e0  00000000  00000000  00000b98  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000009b2  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000331  00000000  00000000  0000162a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000062c  00000000  00000000  0000195b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a8  00000000  00000000  00001f88  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000264  00000000  00000000  00002130  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000006cb  00000000  00000000  00002394  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002a5f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec ec       	ldi	r30, 0xCC	; 204
  3a:	f3 e0       	ldi	r31, 0x03	; 3
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 36       	cpi	r26, 0x60	; 96
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	16 d0       	rcall	.+44     	; 0x86 <main>
  5a:	b6 c1       	rjmp	.+876    	; 0x3c8 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <init_adc>:
#include <avr/io.h>
#include "adc.h"

void init_adc(void)
{
	ADMUX=(1<<REFS0);                         // For Aref=AVcc;
  5e:	80 e4       	ldi	r24, 0x40	; 64
  60:	87 b9       	out	0x07, r24	; 7
	ADMUX &= ~(1 << ADLAR);   // clear for 10 bit resolution
  62:	3d 98       	cbi	0x07, 5	; 7
	
	ADCSRA=(1<<ADEN)|(1<<ADPS2)|(1<<ADPS1)|(1<<ADPS0); //Rrescalar div factor =128
  64:	87 e8       	ldi	r24, 0x87	; 135
  66:	86 b9       	out	0x06, r24	; 6
}
  68:	08 95       	ret

0000006a <read_adc>:
{
	int ADCval;

	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
	ADMUX|=ch;
  6a:	97 b1       	in	r25, 0x07	; 7
uint16_t read_adc(uint8_t ch)
{
	int ADCval;

	//Select ADC Channel ch must be 0-7
	ch=ch&0b00000111;
  6c:	87 70       	andi	r24, 0x07	; 7
	ADMUX|=ch;
  6e:	98 2b       	or	r25, r24
  70:	97 b9       	out	0x07, r25	; 7

	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  72:	36 9a       	sbi	0x06, 6	; 6

	//Wait for conversion to complete
	while(ADCSRA & (1 << ADSC));
  74:	36 99       	sbic	0x06, 6	; 6
  76:	fe cf       	rjmp	.-4      	; 0x74 <read_adc+0xa>

	ADCval = ADCL;
  78:	24 b1       	in	r18, 0x04	; 4
	ADCval = (ADCH << 8) + ADCval;    // ADCH is read so ADC can be updated again
  7a:	35 b1       	in	r19, 0x05	; 5
  7c:	93 2f       	mov	r25, r19
  7e:	80 e0       	ldi	r24, 0x00	; 0
  80:	82 0f       	add	r24, r18
  82:	91 1d       	adc	r25, r1

	return ADCval;
	
}
  84:	08 95       	ret

00000086 <main>:
#include "adc.h"
#include "main.h"


int main(void)
{
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
  8a:	00 d0       	rcall	.+0      	; 0x8c <main+0x6>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
	init_adc();
  90:	e6 df       	rcall	.-52     	; 0x5e <init_adc>
}


static inline void init_relay(void)
{
	DDRD |= (1 << DDD2);
  92:	8a 9a       	sbi	0x11, 2	; 17
	PORTD &= ~(1 << PORTD2);
  94:	92 98       	cbi	0x12, 2	; 18
	while(1)
	{
		adc_result_0 = 0;
		adc_result_1 = 0;
			
		for(i=0; i<10; i++)
  96:	10 e0       	ldi	r17, 0x00	; 0

	 
		
	while(1)
	{
		adc_result_0 = 0;
  98:	ee 24       	eor	r14, r14
  9a:	ff 24       	eor	r15, r15
		adc_result_1 = 0;
			
		for(i=0; i<10; i++)
  9c:	0f 2e       	mov	r0, r31
  9e:	fa e0       	ldi	r31, 0x0A	; 10
  a0:	7f 2e       	mov	r7, r31
  a2:	f0 2d       	mov	r31, r0
  a4:	aa 24       	eor	r10, r10
  a6:	bb 24       	eor	r11, r11
			adc_result_0 += read_adc(0);
		for(i=0; i<10; i++)
			adc_result_1 += read_adc(1);
	
		adc_result_0 /= 10;
  a8:	0f 2e       	mov	r0, r31
  aa:	fa e0       	ldi	r31, 0x0A	; 10
  ac:	8f 2e       	mov	r8, r31
  ae:	99 24       	eor	r9, r9
  b0:	f0 2d       	mov	r31, r0

int main(void);

static inline void timer1_start(unsigned char val)
{
	TCCR1B = val;
  b2:	05 e0       	ldi	r16, 0x05	; 5
  b4:	05 c0       	rjmp	.+10     	; 0xc0 <main+0x3a>
	{
		adc_result_0 = 0;
		adc_result_1 = 0;
			
		for(i=0; i<10; i++)
			adc_result_0 += read_adc(0);
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	d8 df       	rcall	.-80     	; 0x6a <read_adc>
  ba:	e8 0e       	add	r14, r24
  bc:	f9 1e       	adc	r15, r25
	while(1)
	{
		adc_result_0 = 0;
		adc_result_1 = 0;
			
		for(i=0; i<10; i++)
  be:	1f 5f       	subi	r17, 0xFF	; 255
  c0:	1a 30       	cpi	r17, 0x0A	; 10
  c2:	c8 f3       	brcs	.-14     	; 0xb6 <main+0x30>
  c4:	17 2d       	mov	r17, r7
  c6:	65 01       	movw	r12, r10
			adc_result_0 += read_adc(0);
		for(i=0; i<10; i++)
			adc_result_1 += read_adc(1);
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	cf df       	rcall	.-98     	; 0x6a <read_adc>
  cc:	c8 0e       	add	r12, r24
  ce:	d9 1e       	adc	r13, r25
  d0:	11 50       	subi	r17, 0x01	; 1
		adc_result_0 = 0;
		adc_result_1 = 0;
			
		for(i=0; i<10; i++)
			adc_result_0 += read_adc(0);
		for(i=0; i<10; i++)
  d2:	d1 f7       	brne	.-12     	; 0xc8 <main+0x42>
			adc_result_1 += read_adc(1);
	
		adc_result_0 /= 10;
  d4:	c7 01       	movw	r24, r14
  d6:	b4 01       	movw	r22, r8
  d8:	63 d1       	rcall	.+710    	; 0x3a0 <__udivmodhi4>
		adc_result_1 /= 10;
				
		voltage_0 = adc_result_0 * MULT;
  da:	cb 01       	movw	r24, r22
  dc:	88 0f       	add	r24, r24
  de:	99 1f       	adc	r25, r25
  e0:	88 0f       	add	r24, r24
  e2:	99 1f       	adc	r25, r25
		voltage_1 = adc_result_1 * MULT;
		
		temp_0 = (char) (voltage_0/10 - 273);
  e4:	b4 01       	movw	r22, r8
  e6:	5c d1       	rcall	.+696    	; 0x3a0 <__udivmodhi4>
  e8:	26 2f       	mov	r18, r22
  ea:	21 51       	subi	r18, 0x11	; 17
			adc_result_0 += read_adc(0);
		for(i=0; i<10; i++)
			adc_result_1 += read_adc(1);
	
		adc_result_0 /= 10;
		adc_result_1 /= 10;
  ec:	c6 01       	movw	r24, r12
  ee:	b4 01       	movw	r22, r8
  f0:	57 d1       	rcall	.+686    	; 0x3a0 <__udivmodhi4>
				
		voltage_0 = adc_result_0 * MULT;
		voltage_1 = adc_result_1 * MULT;
  f2:	cb 01       	movw	r24, r22
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
		
		temp_0 = (char) (voltage_0/10 - 273);
		temp_1 = (char) (voltage_1/10 - 273);
  fc:	b4 01       	movw	r22, r8
  fe:	50 d1       	rcall	.+672    	; 0x3a0 <__udivmodhi4>
 100:	61 51       	subi	r22, 0x11	; 17
		
		if(temp_1 > temp_0)
 102:	26 17       	cp	r18, r22
 104:	10 f4       	brcc	.+4      	; 0x10a <main+0x84>
	PORTD &= ~(1 << PORTD2);
}

static inline void relay_on(void)
{
	PORTD |= (1 << PORTD2);
 106:	92 9a       	sbi	0x12, 2	; 18
 108:	01 c0       	rjmp	.+2      	; 0x10c <main+0x86>
}

static inline void relay_off(void)
{
	PORTD &= ~(1 << PORTD2);
 10a:	92 98       	cbi	0x12, 2	; 18
			relay_on();
		else
			relay_off();
		
	
		unsigned char msg[] = {temp_0, temp_1};
 10c:	29 83       	std	Y+1, r18	; 0x01
 10e:	6a 83       	std	Y+2, r22	; 0x02
 110:	17 2d       	mov	r17, r7
		for(i=0; i<10; i++)
		{
			rf_send_msg(msg, sizeof(msg));
 112:	ce 01       	movw	r24, r28
 114:	01 96       	adiw	r24, 0x01	; 1
 116:	62 e0       	ldi	r22, 0x02	; 2
 118:	13 d1       	rcall	.+550    	; 0x340 <rf_send_msg>

int main(void);

static inline void timer1_start(unsigned char val)
{
	TCCR1B = val;
 11a:	0e bd       	out	0x2e, r16	; 46
	TCNT1 = 0;
 11c:	1d bc       	out	0x2d, r1	; 45
 11e:	1c bc       	out	0x2c, r1	; 44
			timer1_start(T1_PRESCALER);
			while(TCNT1 < TIME_25ms);			
 120:	8c b5       	in	r24, 0x2c	; 44
 122:	9d b5       	in	r25, 0x2d	; 45
 124:	84 3b       	cpi	r24, 0xB4	; 180
 126:	91 05       	cpc	r25, r1
 128:	d8 f3       	brcs	.-10     	; 0x120 <main+0x9a>
 12a:	11 50       	subi	r17, 0x01	; 1
		else
			relay_off();
		
	
		unsigned char msg[] = {temp_0, temp_1};
		for(i=0; i<10; i++)
 12c:	91 f7       	brne	.-28     	; 0x112 <main+0x8c>

int main(void);

static inline void timer1_start(unsigned char val)
{
	TCCR1B = val;
 12e:	0e bd       	out	0x2e, r16	; 46
	TCNT1 = 0;
 130:	1d bc       	out	0x2d, r1	; 45
 132:	1c bc       	out	0x2c, r1	; 44
		}		
	
		for(i=0; i<1; i++)
		{
			timer1_start(T1_PRESCALER);
			while(TCNT1 < TIME_1s);				
 134:	8c b5       	in	r24, 0x2c	; 44
 136:	9d b5       	in	r25, 0x2d	; 45
 138:	2c e1       	ldi	r18, 0x1C	; 28
 13a:	80 32       	cpi	r24, 0x20	; 32
 13c:	92 07       	cpc	r25, r18
 13e:	d0 f3       	brcs	.-12     	; 0x134 <main+0xae>
	while(1)
	{
		adc_result_0 = 0;
		adc_result_1 = 0;
			
		for(i=0; i<10; i++)
 140:	10 e0       	ldi	r17, 0x00	; 0

	 
		
	while(1)
	{
		adc_result_0 = 0;
 142:	75 01       	movw	r14, r10
 144:	bd cf       	rjmp	.-134    	; 0xc0 <main+0x3a>

00000146 <rf_tx_enable>:
	rf_tx_disable();
}

void rf_tx_enable(void)
{
    UBRRH = UART_BAUDRATE>>8;     
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	80 bd       	out	0x20, r24	; 32
    UBRRL = UART_BAUDRATE;
 14a:	8f ef       	ldi	r24, 0xFF	; 255
 14c:	89 b9       	out	0x09, r24	; 9
    UCSRB =(1<<TXEN); 
 14e:	88 e0       	ldi	r24, 0x08	; 8
 150:	8a b9       	out	0x0a, r24	; 10
    UCSRC =((1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0));   
 152:	86 e8       	ldi	r24, 0x86	; 134
 154:	80 bd       	out	0x20, r24	; 32
}
 156:	08 95       	ret

00000158 <rf_tx_disable>:
void rf_tx_disable(void)
{
	//UCSRB =0;
	//UCSRC =0x80;
	
	UCSRB &=~(1<<TXEN);
 158:	53 98       	cbi	0x0a, 3	; 10
		
    DDRD |= (1 << DDD1);   
 15a:	89 9a       	sbi	0x11, 1	; 17
    PORTD &= ~(1 << PORTD1);     
 15c:	91 98       	cbi	0x12, 1	; 18
}
 15e:	08 95       	ret

00000160 <rf_recv_byte>:

unsigned char rf_recv_byte (void)
{
	while((UCSRA&(1<<RXC)) == 0);
 160:	5f 9b       	sbis	0x0b, 7	; 11
 162:	fe cf       	rjmp	.-4      	; 0x160 <rf_recv_byte>
	return UDR;
 164:	8c b1       	in	r24, 0x0c	; 12

}
 166:	08 95       	ret

00000168 <rf_rx_init>:

void rf_rx_init(void)
{
	UBRRH = UART_BAUDRATE>>8;    
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	80 bd       	out	0x20, r24	; 32
    UBRRL = UART_BAUDRATE;   
 16c:	8f ef       	ldi	r24, 0xFF	; 255
 16e:	89 b9       	out	0x09, r24	; 9
    UCSRB =((1<<RXEN) | (1<<TXEN)) ;
 170:	88 e1       	ldi	r24, 0x18	; 24
 172:	8a b9       	out	0x0a, r24	; 10
    UCSRC =((1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0));    
 174:	86 e8       	ldi	r24, 0x86	; 134
 176:	80 bd       	out	0x20, r24	; 32
}
 178:	08 95       	ret

0000017a <man_encode>:
	result = nibbles_to_byte(high_nibble, low_nibble);
	return result;
}

unsigned char man_encode (unsigned char in_nibble)
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
 17e:	0f 92       	push	r0
 180:	cd b7       	in	r28, 0x3d	; 61
 182:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char out_byte = 0;
 184:	19 82       	std	Y+1, r1	; 0x01
 186:	94 e0       	ldi	r25, 0x04	; 4
	for(unsigned char i=0; i<4; i++)
	{
		out_byte = out_byte << 2;
 188:	29 81       	ldd	r18, Y+1	; 0x01
 18a:	22 0f       	add	r18, r18
 18c:	22 0f       	add	r18, r18
 18e:	29 83       	std	Y+1, r18	; 0x01
		out_byte = out_byte +  (in_nibble & 0x01) + 0x01;
 190:	29 81       	ldd	r18, Y+1	; 0x01
 192:	2f 5f       	subi	r18, 0xFF	; 255
 194:	38 2f       	mov	r19, r24
 196:	31 70       	andi	r19, 0x01	; 1
 198:	23 0f       	add	r18, r19
 19a:	29 83       	std	Y+1, r18	; 0x01
		in_nibble = in_nibble >> 1;
 19c:	86 95       	lsr	r24
 19e:	91 50       	subi	r25, 0x01	; 1
}

unsigned char man_encode (unsigned char in_nibble)
{
	volatile unsigned char out_byte = 0;
	for(unsigned char i=0; i<4; i++)
 1a0:	99 f7       	brne	.-26     	; 0x188 <man_encode+0xe>
	{
		out_byte = out_byte << 2;
		out_byte = out_byte +  (in_nibble & 0x01) + 0x01;
		in_nibble = in_nibble >> 1;
	}
	return out_byte;
 1a2:	89 81       	ldd	r24, Y+1	; 0x01
}
 1a4:	0f 90       	pop	r0
 1a6:	df 91       	pop	r29
 1a8:	cf 91       	pop	r28
 1aa:	08 95       	ret

000001ac <rf_send_byte>:
#include <avr/io.h>
#include "rf_dll.h"
#define MCU_XTAL 7372800UL

void rf_send_byte(unsigned char byte)
{
 1ac:	cf 93       	push	r28
 1ae:	c8 2f       	mov	r28, r24
	unsigned char man_tx;
	unsigned char nibble=byte&0xf0;
	nibble = nibble>>4;
	man_tx = man_encode (nibble);
 1b0:	82 95       	swap	r24
 1b2:	8f 70       	andi	r24, 0x0F	; 15
 1b4:	e2 df       	rcall	.-60     	; 0x17a <man_encode>
	while((UCSRA&(1<<UDRE)) == 0);
 1b6:	5d 9b       	sbis	0x0b, 5	; 11
 1b8:	fe cf       	rjmp	.-4      	; 0x1b6 <rf_send_byte+0xa>
	UDR = man_tx;
 1ba:	8c b9       	out	0x0c, r24	; 12
	
	nibble=byte&0x0f;
	man_tx = man_encode (nibble);
 1bc:	8c 2f       	mov	r24, r28
 1be:	8f 70       	andi	r24, 0x0F	; 15
 1c0:	dc df       	rcall	.-72     	; 0x17a <man_encode>
	while((UCSRA&(1<<UDRE)) == 0);
 1c2:	5d 9b       	sbis	0x0b, 5	; 11
 1c4:	fe cf       	rjmp	.-4      	; 0x1c2 <rf_send_byte+0x16>
	UDR = man_tx;
 1c6:	8c b9       	out	0x0c, r24	; 12
}
 1c8:	cf 91       	pop	r28
 1ca:	08 95       	ret

000001cc <man_decode>:
unsigned char man_decode (unsigned char encoded)
{
	unsigned char i,dec,enc;
	enc = encoded;
	dec = 0;
	if ((enc&0b11000000)==0b10000000)	
 1cc:	28 2f       	mov	r18, r24
 1ce:	30 e0       	ldi	r19, 0x00	; 0
 1d0:	a9 01       	movw	r20, r18
 1d2:	40 7c       	andi	r20, 0xC0	; 192
 1d4:	50 70       	andi	r21, 0x00	; 0

unsigned char man_decode (unsigned char encoded)
{
	unsigned char i,dec,enc;
	enc = encoded;
	dec = 0;
 1d6:	81 e0       	ldi	r24, 0x01	; 1
 1d8:	40 38       	cpi	r20, 0x80	; 128
 1da:	51 05       	cpc	r21, r1
 1dc:	09 f0       	breq	.+2      	; 0x1e0 <man_decode+0x14>
 1de:	80 e0       	ldi	r24, 0x00	; 0
	if ((enc&0b11000000)==0b10000000)	
		dec = dec | 0b00000001;
	if ((enc&0b00110000)==0b00100000)
 1e0:	a9 01       	movw	r20, r18
 1e2:	40 73       	andi	r20, 0x30	; 48
 1e4:	50 70       	andi	r21, 0x00	; 0
 1e6:	40 32       	cpi	r20, 0x20	; 32
 1e8:	51 05       	cpc	r21, r1
 1ea:	09 f4       	brne	.+2      	; 0x1ee <man_decode+0x22>
		dec = dec | 0b00000010;
 1ec:	82 60       	ori	r24, 0x02	; 2
	if ((enc&0b00001100)==0b00001000)
 1ee:	a9 01       	movw	r20, r18
 1f0:	4c 70       	andi	r20, 0x0C	; 12
 1f2:	50 70       	andi	r21, 0x00	; 0
 1f4:	48 30       	cpi	r20, 0x08	; 8
 1f6:	51 05       	cpc	r21, r1
 1f8:	09 f4       	brne	.+2      	; 0x1fc <man_decode+0x30>
		dec = dec | 0b00000100;
 1fa:	84 60       	ori	r24, 0x04	; 4
	if ((enc&0b00000011)==0b00000010)
 1fc:	23 70       	andi	r18, 0x03	; 3
 1fe:	30 70       	andi	r19, 0x00	; 0
 200:	22 30       	cpi	r18, 0x02	; 2
 202:	31 05       	cpc	r19, r1
 204:	09 f4       	brne	.+2      	; 0x208 <man_decode+0x3c>
		dec = dec | 0b00001000;		
 206:	88 60       	ori	r24, 0x08	; 8
	return dec;
}
 208:	08 95       	ret

0000020a <nibbles_to_byte>:

unsigned char nibbles_to_byte(unsigned char high_nibble, unsigned char low_nibble)
{
	unsigned char result=0;
	result = high_nibble;
	result = result << 4;
 20a:	82 95       	swap	r24
 20c:	80 7f       	andi	r24, 0xF0	; 240
	result += low_nibble;
	return result;
}
 20e:	86 0f       	add	r24, r22
 210:	08 95       	ret

00000212 <get_byte>:
		
	return msg_len;
}

unsigned char get_byte(void)
{
 212:	cf 93       	push	r28
	unsigned char rcvd_byte, high_nibble, low_nibble, result;
	rcvd_byte = rf_recv_byte();
 214:	a5 df       	rcall	.-182    	; 0x160 <rf_recv_byte>
	high_nibble = man_decode (rcvd_byte);
 216:	da df       	rcall	.-76     	; 0x1cc <man_decode>
 218:	c8 2f       	mov	r28, r24
	rcvd_byte = rf_recv_byte();
 21a:	a2 df       	rcall	.-188    	; 0x160 <rf_recv_byte>
	low_nibble = man_decode (rcvd_byte);
 21c:	d7 df       	rcall	.-82     	; 0x1cc <man_decode>
 21e:	68 2f       	mov	r22, r24
	result = nibbles_to_byte(high_nibble, low_nibble);
 220:	8c 2f       	mov	r24, r28
 222:	f3 df       	rcall	.-26     	; 0x20a <nibbles_to_byte>
	return result;
}
 224:	cf 91       	pop	r28
 226:	08 95       	ret

00000228 <check_valid_data>:
}

unsigned char check_valid_data(unsigned char byte)
{
	
	if ((byte & 0xC0) == 0xC0)
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	9c 01       	movw	r18, r24
 22c:	20 7c       	andi	r18, 0xC0	; 192
 22e:	30 70       	andi	r19, 0x00	; 0
 230:	20 3c       	cpi	r18, 0xC0	; 192
 232:	31 05       	cpc	r19, r1
 234:	f1 f0       	breq	.+60     	; 0x272 <check_valid_data+0x4a>
		return 2;
	if ((byte & 0x30) == 0x30)
 236:	ac 01       	movw	r20, r24
 238:	40 73       	andi	r20, 0x30	; 48
 23a:	50 70       	andi	r21, 0x00	; 0
 23c:	40 33       	cpi	r20, 0x30	; 48
 23e:	51 05       	cpc	r21, r1
 240:	d1 f0       	breq	.+52     	; 0x276 <check_valid_data+0x4e>
		return 3;
	if ((byte & 0x0C) == 0x0C)
 242:	bc 01       	movw	r22, r24
 244:	6c 70       	andi	r22, 0x0C	; 12
 246:	70 70       	andi	r23, 0x00	; 0
 248:	6c 30       	cpi	r22, 0x0C	; 12
 24a:	71 05       	cpc	r23, r1
 24c:	b1 f0       	breq	.+44     	; 0x27a <check_valid_data+0x52>
		return 4;
	if ((byte & 0x03) == 0x03)
 24e:	83 70       	andi	r24, 0x03	; 3
 250:	90 70       	andi	r25, 0x00	; 0
 252:	83 30       	cpi	r24, 0x03	; 3
 254:	91 05       	cpc	r25, r1
 256:	99 f0       	breq	.+38     	; 0x27e <check_valid_data+0x56>
		return 5;
	if ((byte & 0xC0) == 0x00)
 258:	21 15       	cp	r18, r1
 25a:	31 05       	cpc	r19, r1
 25c:	91 f0       	breq	.+36     	; 0x282 <check_valid_data+0x5a>
		return 6;
	if ((byte & 0x30) == 0x00)
 25e:	41 15       	cp	r20, r1
 260:	51 05       	cpc	r21, r1
 262:	89 f0       	breq	.+34     	; 0x286 <check_valid_data+0x5e>
		return 7;
	if ((byte & 0x0C) == 0x00)
 264:	61 15       	cp	r22, r1
 266:	71 05       	cpc	r23, r1
 268:	81 f0       	breq	.+32     	; 0x28a <check_valid_data+0x62>
		return 8;
	if ((byte & 0x03) == 0x00)
 26a:	00 97       	sbiw	r24, 0x00	; 0
 26c:	81 f4       	brne	.+32     	; 0x28e <check_valid_data+0x66>
		return 9;		
 26e:	89 e0       	ldi	r24, 0x09	; 9
 270:	08 95       	ret

unsigned char check_valid_data(unsigned char byte)
{
	
	if ((byte & 0xC0) == 0xC0)
		return 2;
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	08 95       	ret
	if ((byte & 0x30) == 0x30)
		return 3;
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	08 95       	ret
	if ((byte & 0x0C) == 0x0C)
		return 4;
 27a:	84 e0       	ldi	r24, 0x04	; 4
 27c:	08 95       	ret
	if ((byte & 0x03) == 0x03)
		return 5;
 27e:	85 e0       	ldi	r24, 0x05	; 5
 280:	08 95       	ret
	if ((byte & 0xC0) == 0x00)
		return 6;
 282:	86 e0       	ldi	r24, 0x06	; 6
 284:	08 95       	ret
	if ((byte & 0x30) == 0x00)
		return 7;
 286:	87 e0       	ldi	r24, 0x07	; 7
 288:	08 95       	ret
	if ((byte & 0x0C) == 0x00)
		return 8;
 28a:	88 e0       	ldi	r24, 0x08	; 8
 28c:	08 95       	ret
	if ((byte & 0x03) == 0x00)
		return 9;		
		
	return MAN_DATA_OK;
 28e:	80 e0       	ldi	r24, 0x00	; 0
	
}
 290:	08 95       	ret

00000292 <rf_recv_msg>:
    UCSRB =((1<<RXEN) | (1<<TXEN)) ;
    UCSRC =((1<<URSEL)|(1<<UCSZ1)|(1<<UCSZ0));    
}

unsigned int rf_recv_msg(unsigned char *msg_buf)
{	
 292:	ef 92       	push	r14
 294:	ff 92       	push	r15
 296:	0f 93       	push	r16
 298:	1f 93       	push	r17
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	18 2f       	mov	r17, r24
 2a0:	09 2f       	mov	r16, r25
	
	unsigned char valid_man_data, rcvd_byte, high_nibble, low_nibble, rx_addr, tx_addr, msg_len, check_sum;	
	valid_man_data = MAN_DATA_KO;

		rcvd_byte= rf_recv_byte();
 2a2:	5e df       	rcall	.-324    	; 0x160 <rf_recv_byte>
 2a4:	c8 2f       	mov	r28, r24
		valid_man_data = check_valid_data(rcvd_byte);
 2a6:	c0 df       	rcall	.-128    	; 0x228 <check_valid_data>
 2a8:	f8 2e       	mov	r15, r24
		high_nibble = man_decode (rcvd_byte);
 2aa:	8c 2f       	mov	r24, r28
 2ac:	8f df       	rcall	.-226    	; 0x1cc <man_decode>
		unsigned char rxadrtmp = RXADDR&0xF0;
		rxadrtmp = rxadrtmp >>4 ;
		if ((valid_man_data == MAN_DATA_OK) && (high_nibble ==rxadrtmp ))
 2ae:	ff 20       	and	r15, r15
 2b0:	39 f5       	brne	.+78     	; 0x300 <rf_recv_msg+0x6e>
 2b2:	8f 30       	cpi	r24, 0x0F	; 15
 2b4:	41 f5       	brne	.+80     	; 0x306 <rf_recv_msg+0x74>
		{
			rcvd_byte = rf_recv_byte();
 2b6:	54 df       	rcall	.-344    	; 0x160 <rf_recv_byte>
 2b8:	c8 2f       	mov	r28, r24
			valid_man_data = check_valid_data(rcvd_byte);
 2ba:	b6 df       	rcall	.-148    	; 0x228 <check_valid_data>
 2bc:	f8 2e       	mov	r15, r24
			low_nibble = man_decode (rcvd_byte);
 2be:	8c 2f       	mov	r24, r28
 2c0:	85 df       	rcall	.-246    	; 0x1cc <man_decode>
			if ((valid_man_data == MAN_DATA_OK) && (low_nibble ==(RXADDR&0x0F) ))
 2c2:	ff 20       	and	r15, r15
 2c4:	19 f5       	brne	.+70     	; 0x30c <rf_recv_msg+0x7a>
 2c6:	8f 30       	cpi	r24, 0x0F	; 15
 2c8:	21 f5       	brne	.+72     	; 0x312 <rf_recv_msg+0x80>
				rx_addr = nibbles_to_byte(high_nibble, low_nibble);			
 2ca:	6f e0       	ldi	r22, 0x0F	; 15
 2cc:	9e df       	rcall	.-196    	; 0x20a <nibbles_to_byte>
 2ce:	c8 2f       	mov	r28, r24
				return RX_ADDR_ERR | 0x8000;
		}else
			return RX_ADDR_ERR | 0x8000;
		;	

	tx_addr = get_byte();	
 2d0:	a0 df       	rcall	.-192    	; 0x212 <get_byte>
	if (tx_addr != TXADDR)
 2d2:	81 30       	cpi	r24, 0x01	; 1
 2d4:	09 f5       	brne	.+66     	; 0x318 <rf_recv_msg+0x86>
		return TX_ADDR_ERR | 0x8000;
		
	
	msg_len = get_byte();	
 2d6:	9d df       	rcall	.-198    	; 0x212 <get_byte>
 2d8:	e8 2e       	mov	r14, r24
	check_sum = rx_addr + tx_addr + msg_len;
 2da:	cf 5f       	subi	r28, 0xFF	; 255
 2dc:	fc 2e       	mov	r15, r28
 2de:	f8 0e       	add	r15, r24
	
	for(unsigned char i=0; i < msg_len; i++)
 2e0:	c1 2f       	mov	r28, r17
 2e2:	d0 2f       	mov	r29, r16
 2e4:	03 c0       	rjmp	.+6      	; 0x2ec <rf_recv_msg+0x5a>
	{
		rcvd_byte = get_byte();
 2e6:	95 df       	rcall	.-214    	; 0x212 <get_byte>
		*(msg_buf++) = rcvd_byte;
 2e8:	89 93       	st	Y+, r24
		check_sum += rcvd_byte;
 2ea:	f8 0e       	add	r15, r24
		
	
	msg_len = get_byte();	
	check_sum = rx_addr + tx_addr + msg_len;
	
	for(unsigned char i=0; i < msg_len; i++)
 2ec:	8c 2f       	mov	r24, r28
 2ee:	81 1b       	sub	r24, r17
 2f0:	8e 15       	cp	r24, r14
 2f2:	c8 f3       	brcs	.-14     	; 0x2e6 <rf_recv_msg+0x54>
		check_sum += rcvd_byte;
	}

	
			
	if (check_sum != get_byte())
 2f4:	8e df       	rcall	.-228    	; 0x212 <get_byte>
 2f6:	8f 15       	cp	r24, r15
 2f8:	91 f4       	brne	.+36     	; 0x31e <rf_recv_msg+0x8c>
		return CHK_SUM_ERR | 0x8000;
		
	return msg_len;
 2fa:	8e 2d       	mov	r24, r14
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	11 c0       	rjmp	.+34     	; 0x322 <rf_recv_msg+0x90>
			if ((valid_man_data == MAN_DATA_OK) && (low_nibble ==(RXADDR&0x0F) ))
				rx_addr = nibbles_to_byte(high_nibble, low_nibble);			
			else
				return RX_ADDR_ERR | 0x8000;
		}else
			return RX_ADDR_ERR | 0x8000;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	90 e8       	ldi	r25, 0x80	; 128
 304:	0e c0       	rjmp	.+28     	; 0x322 <rf_recv_msg+0x90>
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e8       	ldi	r25, 0x80	; 128
 30a:	0b c0       	rjmp	.+22     	; 0x322 <rf_recv_msg+0x90>
			valid_man_data = check_valid_data(rcvd_byte);
			low_nibble = man_decode (rcvd_byte);
			if ((valid_man_data == MAN_DATA_OK) && (low_nibble ==(RXADDR&0x0F) ))
				rx_addr = nibbles_to_byte(high_nibble, low_nibble);			
			else
				return RX_ADDR_ERR | 0x8000;
 30c:	81 e0       	ldi	r24, 0x01	; 1
 30e:	90 e8       	ldi	r25, 0x80	; 128
 310:	08 c0       	rjmp	.+16     	; 0x322 <rf_recv_msg+0x90>
 312:	81 e0       	ldi	r24, 0x01	; 1
 314:	90 e8       	ldi	r25, 0x80	; 128
 316:	05 c0       	rjmp	.+10     	; 0x322 <rf_recv_msg+0x90>
			return RX_ADDR_ERR | 0x8000;
		;	

	tx_addr = get_byte();	
	if (tx_addr != TXADDR)
		return TX_ADDR_ERR | 0x8000;
 318:	82 e0       	ldi	r24, 0x02	; 2
 31a:	90 e8       	ldi	r25, 0x80	; 128
 31c:	02 c0       	rjmp	.+4      	; 0x322 <rf_recv_msg+0x90>
	}

	
			
	if (check_sum != get_byte())
		return CHK_SUM_ERR | 0x8000;
 31e:	83 e0       	ldi	r24, 0x03	; 3
 320:	90 e8       	ldi	r25, 0x80	; 128
		
	return msg_len;
}
 322:	df 91       	pop	r29
 324:	cf 91       	pop	r28
 326:	1f 91       	pop	r17
 328:	0f 91       	pop	r16
 32a:	ff 90       	pop	r15
 32c:	ef 90       	pop	r14
 32e:	08 95       	ret

00000330 <preamble>:
	return MAN_DATA_OK;
	
}

void preamble(void)
{
 330:	88 e0       	ldi	r24, 0x08	; 8
	for(unsigned char i=0; i < START_STOP_BYTES; i++)
	{
		while((UCSRA&(1<<UDRE)) == 0);
		UDR = 0xF0;
 332:	90 ef       	ldi	r25, 0xF0	; 240

void preamble(void)
{
	for(unsigned char i=0; i < START_STOP_BYTES; i++)
	{
		while((UCSRA&(1<<UDRE)) == 0);
 334:	5d 9b       	sbis	0x0b, 5	; 11
 336:	fe cf       	rjmp	.-4      	; 0x334 <preamble+0x4>
		UDR = 0xF0;
 338:	9c b9       	out	0x0c, r25	; 12
 33a:	81 50       	subi	r24, 0x01	; 1
	
}

void preamble(void)
{
	for(unsigned char i=0; i < START_STOP_BYTES; i++)
 33c:	d9 f7       	brne	.-10     	; 0x334 <preamble+0x4>
	{
		while((UCSRA&(1<<UDRE)) == 0);
		UDR = 0xF0;
	}
}
 33e:	08 95       	ret

00000340 <rf_send_msg>:
	while((UCSRA&(1<<UDRE)) == 0);
	UDR = man_tx;
}

void rf_send_msg(unsigned char *msg_buf, unsigned char nbytes)
{
 340:	ff 92       	push	r15
 342:	0f 93       	push	r16
 344:	1f 93       	push	r17
 346:	cf 93       	push	r28
 348:	df 93       	push	r29
 34a:	8c 01       	movw	r16, r24
 34c:	f6 2e       	mov	r15, r22
	unsigned char i;
	rf_tx_enable();
 34e:	fb de       	rcall	.-522    	; 0x146 <rf_tx_enable>
	preamble();	
 350:	ef df       	rcall	.-34     	; 0x330 <preamble>
	rf_send_byte(RXADDR);
 352:	8f ef       	ldi	r24, 0xFF	; 255
 354:	2b df       	rcall	.-426    	; 0x1ac <rf_send_byte>
	rf_send_byte(TXADDR);
 356:	81 e0       	ldi	r24, 0x01	; 1
 358:	29 df       	rcall	.-430    	; 0x1ac <rf_send_byte>
	rf_send_byte(nbytes);
 35a:	8f 2d       	mov	r24, r15
 35c:	27 df       	rcall	.-434    	; 0x1ac <rf_send_byte>
	unsigned char checksum = RXADDR + TXADDR + nbytes;
	for(i=0 ; i < nbytes; i++)
 35e:	ff 20       	and	r15, r15
 360:	71 f0       	breq	.+28     	; 0x37e <rf_send_msg+0x3e>
	man_tx = man_encode (nibble);
	while((UCSRA&(1<<UDRE)) == 0);
	UDR = man_tx;
}

void rf_send_msg(unsigned char *msg_buf, unsigned char nbytes)
 362:	e8 01       	movw	r28, r16
 364:	21 96       	adiw	r28, 0x01	; 1
 366:	8f 2d       	mov	r24, r15
 368:	81 50       	subi	r24, 0x01	; 1
 36a:	c8 0f       	add	r28, r24
 36c:	d1 1d       	adc	r29, r1
	rf_send_byte(TXADDR);
	rf_send_byte(nbytes);
	unsigned char checksum = RXADDR + TXADDR + nbytes;
	for(i=0 ; i < nbytes; i++)
	{
		checksum += *msg_buf;
 36e:	f8 01       	movw	r30, r16
 370:	81 91       	ld	r24, Z+
 372:	8f 01       	movw	r16, r30
 374:	f8 0e       	add	r15, r24
		rf_send_byte(*msg_buf++);
 376:	1a df       	rcall	.-460    	; 0x1ac <rf_send_byte>
	preamble();	
	rf_send_byte(RXADDR);
	rf_send_byte(TXADDR);
	rf_send_byte(nbytes);
	unsigned char checksum = RXADDR + TXADDR + nbytes;
	for(i=0 ; i < nbytes; i++)
 378:	0c 17       	cp	r16, r28
 37a:	1d 07       	cpc	r17, r29
 37c:	c1 f7       	brne	.-16     	; 0x36e <rf_send_msg+0x2e>
	{
		checksum += *msg_buf;
		rf_send_byte(*msg_buf++);
	}
	rf_send_byte(checksum);
 37e:	8f 2d       	mov	r24, r15
 380:	15 df       	rcall	.-470    	; 0x1ac <rf_send_byte>
	
		while((UCSRA&(1<<UDRE)) == 0);
 382:	5d 9b       	sbis	0x0b, 5	; 11
 384:	fe cf       	rjmp	.-4      	; 0x382 <rf_send_msg+0x42>
		UDR = 10;
 386:	8a e0       	ldi	r24, 0x0A	; 10
 388:	8c b9       	out	0x0c, r24	; 12
			while((UCSRA&(1<<UDRE)) == 0);
 38a:	5d 9b       	sbis	0x0b, 5	; 11
 38c:	fe cf       	rjmp	.-4      	; 0x38a <rf_send_msg+0x4a>
		UDR = 13;
 38e:	8d e0       	ldi	r24, 0x0D	; 13
 390:	8c b9       	out	0x0c, r24	; 12
	
	rf_tx_disable();
 392:	e2 de       	rcall	.-572    	; 0x158 <rf_tx_disable>
}
 394:	df 91       	pop	r29
 396:	cf 91       	pop	r28
 398:	1f 91       	pop	r17
 39a:	0f 91       	pop	r16
 39c:	ff 90       	pop	r15
 39e:	08 95       	ret

000003a0 <__udivmodhi4>:
 3a0:	aa 1b       	sub	r26, r26
 3a2:	bb 1b       	sub	r27, r27
 3a4:	51 e1       	ldi	r21, 0x11	; 17
 3a6:	07 c0       	rjmp	.+14     	; 0x3b6 <__udivmodhi4_ep>

000003a8 <__udivmodhi4_loop>:
 3a8:	aa 1f       	adc	r26, r26
 3aa:	bb 1f       	adc	r27, r27
 3ac:	a6 17       	cp	r26, r22
 3ae:	b7 07       	cpc	r27, r23
 3b0:	10 f0       	brcs	.+4      	; 0x3b6 <__udivmodhi4_ep>
 3b2:	a6 1b       	sub	r26, r22
 3b4:	b7 0b       	sbc	r27, r23

000003b6 <__udivmodhi4_ep>:
 3b6:	88 1f       	adc	r24, r24
 3b8:	99 1f       	adc	r25, r25
 3ba:	5a 95       	dec	r21
 3bc:	a9 f7       	brne	.-22     	; 0x3a8 <__udivmodhi4_loop>
 3be:	80 95       	com	r24
 3c0:	90 95       	com	r25
 3c2:	bc 01       	movw	r22, r24
 3c4:	cd 01       	movw	r24, r26
 3c6:	08 95       	ret

000003c8 <_exit>:
 3c8:	f8 94       	cli

000003ca <__stop_program>:
 3ca:	ff cf       	rjmp	.-2      	; 0x3ca <__stop_program>
